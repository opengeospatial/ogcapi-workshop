{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the OGC API workshop!","text":"<p>OGC is globally known for its proven widely implemented open standards. The OGC open consensus-based standards development process has evolved to move at the pace of innovation, with constant input from technology forecasting, practical prototyping, real-world testing, certification and compliance and community engagement. Today we are revolutionizing how geospatial/location information is shared, accessed, integrated, and analyzed via the OGC\u2019s revolutionary APIs- the building blocks for location information.</p> <p>OGC APIs are designed to make it easy for ANYONE to provide and use geospatial data on the web, and to integrate this data with ANY other type of information. These Standards build upon the legacy of the OGC Web Service Standards (WMS, WFS, WCS, WPS, etc.), but define resource-centric APIs that take advantage of modern web development practices. This web page provides information on these Standards in a consolidated location.</p> <p>These Standards are being constructed as \"building blocks\" that can be used to assemble novel APIs for web access to geospatial content. The building blocks are defined not only by the requirements of the Standards specified in the OGC's Standards Program, but also through interoperability prototyping and testing in the OGC's Collaborative Solutions and Innovation Program.</p>"},{"location":"#your-workshop-team","title":"Your workshop team","text":"Joana Simoes (OGC) Tom Kralidis (OSGeo)"},{"location":"#about-this-workshop","title":"About this workshop","text":"<p>This workshop provides a combination of concepts, presentation and exercises of OGC APIs in support of discovery, access, visualization and processing in support of FAIR data principles.</p> <p>Each deep dive module starts with an \"Audience\" and \"Learning Objectives\" sections:</p> <p>Abstract</p> <p>Describes what this module is about.</p> <p>Learning Objectives</p> <p>Describes what students should be able to do, after the completion of the module.</p> <p>Exercises are indicated as follows:</p> <p>Example exercise</p> <p>A section marked like this indicates that you can try out the exercise.</p> <p>Also you will notice notes sections within the text:</p> <p>Note</p> <p>Highlights some important aspect.</p> <p>Examples are indicated as follows:</p> <p>Bash shell <pre><code>curl -X 'GET' 'https://myrequest.com'\n</code></pre></p> <p>JSON <pre><code>{\n    \"title\": \"my cool collection title\",\n    \"description\": \"my cool collection description\"\n}\n</code></pre></p>"},{"location":"#workshop-location-and-materials","title":"Workshop location and materials","text":"<p>This workshop is always provided live at ogcapi-workshop.ogc.org.</p> <p>The workshop contents, wiki and issue tracker are managed on GitHub at github.com/opengeospatial/ogcapi-workshop.</p>"},{"location":"#printing-this-workshop","title":"Printing this workshop","text":"<p>To print this workshop, navigate to the print page and select File &gt; Print &gt; Save as PDF.</p>"},{"location":"#support","title":"Support","text":"<p>For issues/bugs/suggestions or improvements/contributions, please use the GitHub issue tracker.</p> <p>Contributions are always encouraged and welcome!</p>"},{"location":"#cite-this-workshop","title":"Cite this workshop","text":""},{"location":"#now-on-to-the-workshop-ready-lets-go","title":"Now, on to the workshop.  Ready?  Let's go!","text":""},{"location":"background-and-context/","title":"Background and context","text":"<p>The geospatial domain has a long history of efforts focused on data discovery, access, and visualization.</p> <p>This page provides background and history of geospatial web services, web mapping, and distributed computing platforms.</p>"},{"location":"background-and-context/#geospatial-api-evolution","title":"Geospatial API evolution","text":"<p>The 1990s saw the initial implementation of Service-Oriented Architecture (SOA).  The first OGC Web Map Service (WMS) standard was published in 1999, providing a vendor-neutral approach to visualizing maps of geospatial data on a web page.  Web services had strong roots in XML-RPC (eXtensible Markup Language over Remote Procedure Call) and CORBA, and standards and technologies such as SOAP, WSDL and UDDI began to emerge as as means to describe, discover, and perform request/response workflow via a web interface.</p> <p>The 2000s saw continued development of OGC Web Service standards such as Web Feature Service (WFS), Catalogue Service for the Web (CSW), Web Coverage Service (WCS), Web Processing Service (WPS), and others.  In addition, Geography Markup Language (GML) became an official OGC standard in support of standardized (vector) data exchange over the Internet.  Web services were typically designed with the concept of a relational database model (RDBMS) as the backend data/metadata repository.</p> <p>In the mid 2000s, JavaScript, AJAX and slippy maps/tiles began to emerge in the web mapping domain, which provided Web 2.0 design patterns which resulted in more responsive maps on web pages over the Web.</p>"},{"location":"background-and-context/#realities-of-web-service-architectures","title":"Realities of web service architectures","text":"<p>OGC Web service standards provided state of the art approaches for data discovery, access, and visualization.  At the same time, as the concept of Web architecture evolved, various characteristics of Web service standards showed room for improvement in order to evolve:</p> <ul> <li>XML: while XML was/is a proven and extensible encoding/representation, working with XML in a web development   environment proved cumbersome (parsing into dedicated objects).  As well, the verbose nature of XML proved expensive   for working over the Web for transferring large payloads of data</li> <li>Building a specialized transport layer on top of HTTP: HTTP (the protocol) itself provided native request/response   mechanisms (error codes, content negotiation), which were typically additional defined within Web service standards.   For example, an HTTP 400 exception natively communicates a faulty request, whereas an HTTP 200 exception indicates   a successful response.  Web service standards were commonly developed where a 200 response could indicate a faulty   request (where the client would have to inspect the content of an HTTP response, instead of the actual HTTP status   code</li> <li>Specifications: Web service specifications were typically feature complete and developed with a 100% solution in mind,   which proved challenging to implement a fully complient server or client, for example</li> <li>Web challenges: Web service specifications were difficult to implement for web developers and typically required   specialized domain expertise in geospatial to interpret and understand specification requirements.  In addition, Web   services were difficult to integrate with mainstream Internet search engines</li> </ul>"},{"location":"background-and-context/#being-webby-a-new-paradigm","title":"Being webby: a new paradigm","text":"<p>In 2017, the W3C published the Spatial Data on the Web Best Practices, which provided recommendations on data formats, identifiers, access, licensing, and provenance.  The goal of this best practice was to provide a baseline of recommendations to integrate geospatial data and services with mainline Web practices and  design patterns.  In addition, the OGC published the OGC API Whitepaper describing, discussing APIs and next steps for the OGC at the time.  It became obvious that a \"clean break\" was needed, in order for OGC APIs to become more \"of the Web\" and lower barrier for non-domain experts.</p> <p>A new paradigm emerged, which highlighted the following concepts:</p> <ul> <li>being webby (humans, search engines)</li> <li>developer friendly</li> <li>lightweight specification development</li> <li>moving from service oriented to resource oriented: removing HTTP use as a tunnel:<ul> <li>service oriented: <code>/ows?request=GetFeature&amp;typename=roads&amp;featureid=5</code></li> <li>resource oriented: <code>/api/collections/roads/items/5</code></li> </ul> </li> <li>modular specification development</li> <li>core and extension specifications, allowing for low barrier implementation and adoption for mass market/the Web</li> </ul> <p>In 2018, the OGC began to ran various hackathons, starting work on WFS3 (now OGC API - Features - Part 1: Core), as well as a Weather on the Web API (now OGC API - Environmental Data Retrieval).  This represented the origins of the OGC API movement!</p> <p>The development and working processes of OGC standards development themselves evolved during this time.  OGC API specifications began to be developed on public GitHub repositories, allowing for anyone in the public to discuss and collaboration for a given OGC API standard in the open on GitHub.  In addition, the specifications themselves began to be developed in AsciiDoc (an open format for documentation/markup), and made available as HTML pages (and PDF).  Collaborative tools used by OGC also proliferated, such as Gitter/Element as well as Discord.</p> <p>Note</p> <p>OGC standards, while primarily developed on GitHub, are voted on by the OGC membership.</p>"},{"location":"background-and-context/#summary","title":"Summary","text":"<p>Geospatial Web Services and APIs have been a long running activity in the geospatial domain.  OGC API standards are designed on the lessons learned of past efforts, and built to be low barrier, with a focus on resources (data/content!) using modern web development principles and practices.</p>"},{"location":"compliance-and-certification/","title":"Compliance and certification","text":"<p>The OGC Compliance Program provides the resources, procedures, and policies to certify products for compliance with one or more OGC standards. </p> <p>The primary purpose of the program is to increase systems interoperability while reducing technology risks by providing a process whereby compliance with OGC standards can be tested.</p> <p>You can browse the OGC compliance product page to check the list of products certified by OGC.</p>"},{"location":"compliance-and-certification/#team-engine","title":"TEAM Engine","text":"<p>In order to be certified, a product needs to passed the tests on the OGC validator. The OGC validation infrastructure is based on TEAM Engine, a Free and Open Source tool which is being incubated as an OSGeo project. </p> <p>Developers can either use the hosted version of TEAM Engine on CITE, or install and integrate it locally into their own pipeline. </p> <p>OGC API test suites</p> <p>We will refer to the available test suites in the context of each standard, during the OGC API Deep Dive.</p>"},{"location":"compliance-and-certification/#reference-implementations","title":"Reference implementations","text":"<p>A reference implementation (RI) is a fully functional, licensed copy of a tested, branded software that has passed the test for an associated conformance class in a version of an Implementation Standard and that is free and publicly available for testing via a web service or download. </p> <ul> <li>RI do not need to comply to all the conformance classes in the standard, but they should conform at least to the core.</li> <li>RI should be available, on a reliable server that has a high treshold for uptime.</li> <li>OGC will provide an incentive to the first two RI that pass the test related to a conformance class within a version of an Implementation Standard</li> </ul> <p>More information about RI is available on Compliance Testing Program Policies &amp; Procedures. </p>"},{"location":"compliance-and-certification/#summary","title":"Summary","text":"<p>OGC compliance and certification provides an organization a level of confidence that a product has been deemed compatible for maximum interoperability against a given OGC specification.</p>"},{"location":"conclusion/","title":"Conclusion","text":"<p>We hope this workshop provided a valuable overview of OGC APIs, with the goal of enabling low barrier, simple and flexible geospatial data publishing in support of FAIR data principles.</p> <p></p>"},{"location":"conclusion/#contributing","title":"Contributing","text":"<p>Suggestions, improvements and fixes are always welcome. Please visit our GitHub page for more information on getting in touch.</p> <p>Thank you for your interest in OGC APIs!</p>"},{"location":"getting-involved/","title":"Getting involved","text":"<p>There are numerous ways to get involved with the development of OGC APIs. If you want to attend the Standards Working Group (SWG) meetings, and take part of the most formal component of standards development (including voting), an OGC membership is required. However, there are other opportunities to get involved that do not require an OGC membership.  We present some of those below.</p>"},{"location":"getting-involved/#specifications-github","title":"Specifications / GitHub","text":"<p>Most of the OGC API development takes place on public GitHub repositories. This means anyone can follow the development of the standards, from their early stages and even contribute through the usual mechanisms (e.g.: issue tracker, pull requests)</p> <p></p>"},{"location":"getting-involved/#ogc-code-sprints","title":"OGC Code sprints","text":"<p>The OGC Code sprints are an important part of the standards development process, as they provide a feedback loop from the developer community. During these events, working group members and developers join forces towards the common goal of pushing the standards development forward. This is done through discussions and prototyping. These are some characteristics of code sprints:</p> <ul> <li>Held regularly (around three times a year)</li> <li>Three-day collaborative, virtual/hybrid, events</li> <li>Inclusive to all OGC standards</li> <li>Often co-organised with alliance partners (e.g.: ISO, OSGeo, ASF)</li> <li>Feature developers from across the globe</li> <li>Feature a mentor stream, to onboard newcomers</li> </ul> <p></p> <p>Not only code!</p> <p>Although most of the participants spend time coding (that is \"why\" it is called a code sprint, after all), we also welcome no-code activities, such as working on documentation, testing or GitHub issues.</p>"},{"location":"getting-involved/#ogc-events-discord-server","title":"OGC Events Discord server","text":"<p>The OGC Events Discord server provides a platform for running the code sprints. Its channel structure, facilitates focused discussions and we leverage the audio channels to run the code sprint meetings. In between code sprints, the Discord server also provides a meeting place to discuss topics related to OGC standards development and implementations.</p> <p></p>"},{"location":"getting-involved/#developer-resources","title":"Developer resources","text":"<p>You can learn more about the OGC API (and other OGC standards), from a developer-centric perspective on the OGC developer website:</p> <p>https://developer.ogc.org</p> <p>You can learn more about past and upcoming developer events (including code sprints) in the developer events wiki page:</p> <p>https://github.com/opengeospatial/developer-events/wiki</p>"},{"location":"overview-and-main-concepts/","title":"Overview and main concepts","text":"<p>The core of Web APIs can be summarized as:</p> <ul> <li>interfaces: the way in which \"conversations\" happen between APIs and clients of them</li> <li>encodings: the \"formats\" of contents provided by an API</li> </ul>"},{"location":"overview-and-main-concepts/#client-server","title":"Client / server","text":"<p>In a typical client / server environment, a client is asking a server to perform an action (for example, requesting data), with the ability to add additional instructions such as querying, filtering and what format for the API to provide as part of the response.</p> <p>The image below, taken from Introduction to GIS illustrates the concept of the request / response lifecycle between a client and a server.</p> <p></p>"},{"location":"overview-and-main-concepts/#web-architecture","title":"Web architecture","text":""},{"location":"overview-and-main-concepts/#rest","title":"REST","text":"<p>REpresentational State Transfer (REST) is an architectural style for the Web.  The core concepts of REST are:</p> <ul> <li>HTTP verbs (GET/PUT/POST/DELETE)</li> <li>HTTP codes (200, 201, 404, etc.)</li> <li>URIs to identify resources</li> <li>Content negotiation (media types)</li> <li>Stateless</li> </ul> <p>Implementing REST results in a simpler, low barrier architecture that is based on web primitives.  This enables systems and applications to focus more on domain/business requirements.</p> <p>Know your HTTP!</p> <ul> <li>verbs: https://http.dev/methods</li> <li>status codes: https://http.dev/status</li> </ul>"},{"location":"overview-and-main-concepts/#json","title":"JSON","text":"<p>JSON (JavaScript Object Notation) is a compact and very easy to understand encoding, which is very popular among web developers.  JSON is the primary encoding used in RESTful web services and APIs, and is by nature extensible.</p> <p>Let's compare JSON and XML in a simple example:</p> <p>An example XML document (75 bytes):</p> <pre><code>&lt;order&gt;\n    &lt;orderID&gt;123&lt;/orderId&gt;\n    &lt;status&gt;completed&lt;/status&gt;\n&lt;/order&gt;\n</code></pre> <p>The same document as JSON (46 bytes):</p> <pre><code>{\n  \"orderID\": 123,\n  \"status\": \"completed\"\n}\n</code></pre> <p>Here, we see a more compact representation using JSON.  In addition, it is easier to determine the underlying data type literals (integers, strings, etc.) by parsing the document itself.</p> <p>Note</p> <p>JSON Schema is the JSON equivalent to W3C XML Schema, providing a language to define the content model of a JSON document.  A JSON document can choose to implement a JSON Schema, or not, depending on a given application's requirements for data validation and integrity</p>"},{"location":"overview-and-main-concepts/#ogc-apis","title":"OGC APIs","text":"<p>This section provides a high level overview of OGC API standards support.</p> <p>Cite</p> <p>The OGC API family of standards are being developed to make it easy for anyone to provide geospatial data to the web. These standards build upon the legacy of the OGC Web Service standards (WMS, WFS, WCS, WPS, etc.), but define resource-centric APIs that take advantage of modern web development practices. This web page provides information on these standards in a consolidated location.</p> <p>These standards are being constructed as \"building blocks\" that can be used to assemble novel APIs for web access to geospatial content. The building blocks are defined not only by the requirements of the specific standards, but also through interoperability prototyping and testing in OGC's Innovation Program. </p>"},{"location":"overview-and-main-concepts/#ogc-api-common","title":"OGC API - Common","text":"<p>OGC API - Common is a common framework used in all OGC API's.  OGC API - Common provides the following functionality:</p> <ul> <li>based on OpenAPI 3.0</li> <li>HTML and JSON as the dominant encodings, alternative encodings are possible</li> <li>common and shared endpoints such as:<ul> <li><code>/</code> (landing page)</li> <li><code>/conformance</code></li> <li><code>/openapi</code></li> <li><code>/collections</code></li> <li><code>/collections/foo</code></li> </ul> </li> <li>common aspects such as pagination, links between resources, basic filtering, query parameters (<code>bbox</code>, <code>datetime</code>, etc.)</li> </ul> <p>OGC API - Common allows for specification developers to focus on the key functionality of a given API (i.e. data access, etc.) while using common constructs. This harmonizes OGC API standards and enables deeper integration with less code. This also allows for OGC API client software to be more streamlined.</p> <p>For more details about this standard, please refer to the OGC API - Common section.</p>"},{"location":"overview-and-main-concepts/#approved-standards","title":"Approved Standards","text":"<p>The below OGC API standards have been approved and available for use.  Note that these standards have 1 or more \"Parts\" or extensions that enable specific functionality.  \"Part 1\" of a given standard represents the most basic capabilities.  Additional parts can also be implemented as building blocks.</p> <ul> <li>OGC API - Features offers the capability to create, modify, and query spatial data on the Web and specifies requirements and recommendations for APIs that want to follow a standard way of sharing feature data</li> <li>OGC API - Environmental Data Retrieval provides a family of lightweight interfaces to access Environmental Data resources. Each resource addressed by an EDR API maps to a defined query pattern</li> <li>OGC API - Maps offers a modern approach to the OGC Web Map Service (WMS) standard for provision map and raster content</li> <li>OGC API - Processes allows for processing tools to be called and combined from many sources and applied to data in other OGC API resources though a simple API</li> <li>OGC API - Tiles provides extended functionality to other OGC API Standards to deliver vector tiles, map tiles, and other tiled data</li> <li>Moving Features defines an API that provides access to data representing features that move as rigid bodies</li> <li>OGC API - Records provides discovery and access to metadata about geo spatial resources.</li> </ul>"},{"location":"overview-and-main-concepts/#ogc-api-building-blocks","title":"OGC API building blocks","text":"<p>The OGC API approach allows for modularity and \"profiling\" of APIs depending on your requirements.  This means you can mix and match OGC APIs together.</p> <p></p> <p>You can read more about this topic in the building blocks website.</p>"},{"location":"overview-and-main-concepts/#in-development","title":"In development","text":"<p>The OGC API effort is rapidly evolving. Numerous OGC API standards are in development:</p> <ul> <li>Routes provides access to routing data</li> <li>Styles defines a Web API that enables map servers, clients as well as visual style editors, to manage and fetch styles</li> <li>3D GeoVolumes facilitates efficient discovery of and access to 3D content in multiple formats based on a space-centric perspective</li> <li>Joins  supports the joining of data, from multiple sources, with feature collections or directly with other input files</li> <li>Discrete Global Grid System enables applications to organise and access data arranged according to a Discrete Global Grid System (DGGS)</li> <li>Connected Systems is intended to act as a bridge between static data (geographic and other domain features) and dynamic data (observations of these feature properties, and commands/actuations that change these feature properties)</li> </ul> <p></p>"},{"location":"overview-and-main-concepts/#openapi","title":"OpenAPI","text":"<p>Core to OGC API - Common is the OpenAPI initiative to help describe and document an API. OpenAPI defines its structure in an OpenAPI document.  OGC API - Common suggests this document to be located at <code>/openapi</code>. For example, with pygeoapi in a browser  this URL opens an interactive HTML page which facilitates  an API query. Append <code>?f=json</code> to view the document in JSON. The OpenAPI document indicates which endpoints are available in the service, which parameters it accepts and  what types of responses can be expected. The OpenAPI document is a similar concept to Capabilities XML as part of the first generation OGC Web Service standards.</p> <p>OpenAPI Specification parsing in a browser</p> <p>A common approach to interact with Open API's using json is to use a program like  Postman. Also there are browser plugins which enable to define api  requests interactively within a browser. For firefox download the plugin  poster. For Chrome  and Edge use Boomerang.  In Boomerang you can create individual web requests, but also load the open api specification  document and interact with any of the advertised endpoints. </p> <p>The OpenAPI community provides various tools, such as a validator for OAS documents or  generate code as a starting point for client development.</p>"},{"location":"overview-and-main-concepts/#content-and-format-standards","title":"Content and format standards","text":"<p>OGC APIs are typically format agnostic for data.  This means an OGC API can provide any format of data or metadata (JSON, YAML, XML, HTML, etc.).</p> <p>JSON is a core format that is machine readable and easy to parse and handle by client software and tools.  JSON is easily decoded/encoded into native objects in numerous programming languages (Python dictionaries, JavaScript objects, etc.).  OGC API - Common provides uniform JSON formats for the various endpoints it supports.</p> <p>Specific OGC API standards may specify domain specific formats (for example, GeoJSON for OGC API - Features, GeoTIFF for OGC API - Coverages, ISO 19115/19139 for OGC API - Records, etc.), depending on the data or metadata type(s).</p>"},{"location":"overview-and-main-concepts/#summary","title":"Summary","text":"<p>OGC APIs leverage core principles of Web architecture, providing support for discovery, access, visualization, processing of geospatial data, in alignment with industry standards for maximum interoperability on the Web.</p>"},{"location":"roadmap/","title":"OGC API Roadmap","text":"<p>The OGC API Roadmap highlights the current and planned standards efforts as well as related extensions to those standards.  The Roadmap is useful for planning new functionality to users, as well as software implementation.</p> <p>The current Roadmap can be found on the OGC Productboard as follows:</p> <ul> <li>Status</li> <li>Timeline</li> <li>Use Case</li> </ul>"},{"location":"security/","title":"Security and OGC APIs","text":"<p>OGC APIs are designed using modern technologies in order to lower the barrier to geospatial data, services, and processes.</p>"},{"location":"security/#ssltls","title":"SSL/TLS","text":"<p>OGC APIs can be deployed using HTTP or HTTPS.  It is strongly recommended to deploy any services using HTTPS so that clients can validate and verify authenticity of your services accordingly.  Depending on how your system is architected, this may mean applying Secure Sockets Layer/Transport Layer Security (SSL/TLS) on your service host, or if you have a multi-layered deployment architecture, applying as part of your front-end services, at which point internal/inner communication may or may not be implemented using HTTP.</p>"},{"location":"security/#access-control","title":"Access control","text":"<p>Open Standards and APIs are not only for Open Data.  Implementing access control (authentication, authorization) is a critical component of many infrastructures and systems in order to maintain data integrity, authority and trust.  Examples of requiring access control in OGC APIs includes (but is not limited to):</p> <ul> <li>securing all endpoints</li> <li>securing only specific endpoints</li> <li>allowing insert/update/delete capabilities on items in a collection</li> <li>allowing insert/update/delete capabilities on collections</li> </ul> <p>Given that access control concerns, implementations and architectures exist for many domains, it is best to leverage industry standards for implementation.  Given OGC API standards leverage the OpenAPI specification for service descriptions, one can use the OpenAPI Security Scheme Object to describe (not implement!) the access control mechanism(s) for the entire API as well as for a specific path/operation of the API.</p> <p>Supported OpenAPI security schemes include:</p> <ul> <li>API key (<code>apiKey</code>)</li> <li>HTTP authentication (<code>http</code>)</li> <li>OAuth2 common flows (<code>oauth2</code>)</li> <li>OpenID Connect Discovery (<code>openIdConnect</code>)</li> </ul> <p>Access control using HTTP Basic authentication: <pre><code>\"security\": {\n  \"default\": {\n    \"type\": \"http\",\n    \"scheme\": \"basic\",\n    \"description\": \"Please contact us for access information\"\n  }\n}\n</code></pre></p> <p>Access control using an API key: <pre><code>\"security\": {\n  \"default\": {\n    \"type\": \"apiKey\",\n    \"name\": \"api-key\",\n    \"in\": \"query\",\n    \"description\": \"Please see https://example.org/contact-us for more information\"\n  }\n}\n</code></pre></p> <p>Access control using OAuth2: <pre><code>\"security\": {\n  \"default\": {\n    \"type\": \"oauth2\",\n    \"authorizationUrl\": \"https://example.org/oauth/authorize\",\n    \"flow\": \"implicit\",\n    \"description\": \"Please see https://example.org/contact-us for more information\"\n    \"scopes\": {\n        \"read:roads\": \"read roads collection\",\n        \"write:roads\": \"modify roads in the roads collection\"\n  }\n}\n</code></pre></p> <p>Note</p> <p>Implementing the above assumes that the required access control mechanisms are in place.</p>"},{"location":"transition-and-migration/","title":"Transition and migration","text":"<p>According to the OGC Technical Committee Policies and Procedures, if an existing Standard is replaced in part or whole by one or more new Standards, then a special case of deprecation may occur resulting in the original Standard being labeled a \"Legacy Standard.\" </p> <p>This could be the case of many OWS standards, as they are replaced by more modern and more complete OGC APIs.</p> <p>As with deprecated Standards, Legacy Standards are no longer supported, but they remain on the OGC website with a notification that the capabilities of the Standard have been replaced in whole or part by new Standard(s). The notification will clearly indicate that the Legacy Standard is not invalid, but that new implementations of the capabilities of the Standard are better served by the identified new Standard(s).</p> <p>In the Diving into pygeoapi Workshop, you can find a section about the use of bridges to facilitate the migration from OWS to OGC API.</p> <p></p>"},{"location":"api-deep-dive/common/","title":"OGC API - Common","text":"<p>Audience</p> <p>Students that are familiar with web services and APIs, and want to have an overview of OGC API - Common draft standard</p> <p>Learning Objectives</p> <p>At the completion of the module students will be able to:</p> <ul> <li>Explain what the OGC API - Common standard is</li> <li>Describe what can be done with OGC API - Common as a building block</li> </ul>"},{"location":"api-deep-dive/common/#introduction","title":"Introduction","text":"<p>OGC API - Common specifies building blocks that are shared by most or all OGC API Standards to ensure consistency across the family.  In the course of developing Resource Oriented Architectures and Web APIs, some practices proved to be common accross all OGC API standards. The purpose of this standard is to document those practices. It also serves as a common foundation upon which all OGC APIs will be built. </p> <p>Note</p> <p>This tutorial module is not intended to be a replacement to the actual OGC API - Common - Part 1: Core standard or OGC API - Common - Part 2: Geospatial Data draft standard. The tutorial intentionally focuses on a subset of capabilities in order to get the student started with using the standard. Please refer to the OGC API - Common - Part 1: Core standard and OGC API - Common - Part 2: Geospatial Data draft standard for additional detail.</p>"},{"location":"api-deep-dive/common/#background","title":"Background","text":"<p>History</p> <p>OGC API Common standard serves as the \"OWS Common\" standard for OGC Resource Oriented APIs. The OGC API - Common SWG charter was created in 2020 OGC API - Common - Part 1: Core was approved on February 2023.</p> <p>Versions</p> <p>OGC API - Common - Part 1: Core version 1.0.0 is the current   latest version</p>"},{"location":"api-deep-dive/common/#usage","title":"Usage","text":"<p>This specification identifies resources, captures compliance classes, and specifies requirements which are applicable to all OGC API standards.  It should be included as a normative reference by all such standards.</p> <ul> <li>The OGC API - Common - Part 1: Core Standard defines the resources and operations which SHALL be common to all OGC API standards. This Standard defines the minimal requirements for an API to be discovered and used by any client.</li> <li>The Draft OGC API - Common - Part 2: Geospatial Data Standard provides a common connection between the API landing page and resource-specific details. That connection includes metadata which describes the collections of hosted resources, common parameters for selecting subsets of those collections, and URI templates for identifying the above.</li> </ul> <p>In addition, OGC API - Common provides some non-normative information through the OGC API-Common Users Guide.</p>"},{"location":"api-deep-dive/common/#relation-to-other-standards","title":"Relation to other standards","text":"<p>The image below shows the resource architecture in OGC API. OGC API - Common provides a common foundation to all OGC APIs.</p> <p></p>"},{"location":"api-deep-dive/common/#overview-of-resources","title":"Overview of Resources","text":"<p>OGC API - Common - Part 1: Core defines the resources listed in the following table:</p> Resource Method Path Purpose Landing page GET / Retrieves the landing page. The purpose of the landing page is to provide clients with a starting point for using the API. Any resource exposed through an API can be accessed by following paths or links starting from the landing page. The landing page includes three metadata elements; title, description, and attribution. Only the title is required. These three elements describe the API as a whole. Clients can expect to encounter metadata which is more resource-specific as they follow links and paths from the landing page. Conformance declaration GET /conformance Provides a list declaring the modules that are implemented by the API. These modules are referred to as Conformance Classes. The list of Conformance Classes is key to understanding and using an OGC Web API. API definition GET /api Retrieves the API definition which describes the capabilities provided by that API. This resource can be used by developers to understand the API, by software clients to connect to the server, and by development tools to support the implementation of servers and clients. Note use of /api on the server is optional and the API definition may be hosted on completely separate server. <p>The purpose of the draft OGC API - Common - Part 2: Geospatial Data Standard is to provide a common connection between the API landing page and resource-specific details. The table below defines the resources listed in this part.</p> Resource Method Path Purpose Collections GET /collections Retrieves information which describes the set of supported Collections. Collection GET /collections/{collectionId} Retrieves descriptive information about a specific Collection. <p>Providing a common foundation, OGC API - Common is meant to be implemented by \"downstream\" OGC API standards in a uniform and consistent manner.  Examples of OGC API - Common resources will be shown in the context of other OGC API standards.</p>"},{"location":"api-deep-dive/common/#summary","title":"Summary","text":"<p>OGC API - Common documents the set of common practices and shared requirements that have emerged from the development of Resource Oriented Architectures and Web APIs within the OGC. The standard defines resources and access mechanisms which are useful for a client seeking to understand the offerings and capabilities of an API, as well as a connection between the API landing page and resource-specific details. In this deep dive we provided an overview of the standard and look at the resources on part 1 and part 2 (draft).</p>"},{"location":"api-deep-dive/environmental-data-retrieval/","title":"OGC API - Environmental Data Retrieval","text":"<p>Audience</p> <p>Students that are familiar with web services and APIs, and want to have an overview of OGC API - Environmental Data Retrieval standard</p> <p>Learning Objectives</p> <p>At the completion of the module students will be able to:</p> <ul> <li>Explain what the OGC API - Environmental Data Retrieval standard is</li> <li>Describe what can be done with OGC API - Environmental Data Retrieval implementations</li> <li>Understand the main resources offered by implementations of OGC API - Environmental Data Retrieval</li> <li>Understand how to retrieve a description of the capabilities of an implementation of OGC API - Environmental Data Retrieval</li> <li>Understand how to issue requests to an implementation of OGC API - Environmental Data Retrieval</li> <li>Be able to find an OGC API - Environmental Data Retrieval endpoint and use it through a client</li> </ul>"},{"location":"api-deep-dive/environmental-data-retrieval/#introduction","title":"Introduction","text":"<p>OGC API - Environmental Data Retrieval is a standard that provides a family of lightweight interfaces to access Environmental Data resources. The standard, which is also called the Environmental Data Retrieval (EDR) API, addresses two fundamental operations; discovery and query. Discovery operations allow the API to be interrogated to determine its capabilities and retrieve information (metadata) about this distribution of a resource. This includes the API definition of the server as well as metadata about the Environmental Data resources provided by the server. Query operations allow Environmental Data resources to be retrieved from the underlying data store based upon simple selection criteria, defined by this standard and selected by the client.</p> <p>Note</p> <p>This tutorial module is not intended to be a replacement to the actual OGC API - Environmental Data Retrieval standard. The tutorial intentionally focuses on a subset of capabilities in order to get the student started with using the standard. Please refer to the OGC API - Environmental Data Retrieval standard for additional detail.</p>"},{"location":"api-deep-dive/environmental-data-retrieval/#background","title":"Background","text":"<p>History</p> <p>Version 1.1.0 was published on 2023-07-27.</p> <p>Versions</p> <p>OGC API - Environmental Data Retrieval version 1.1.0 is the current latest version</p> <p>Test suite</p> <p>A test suite is available for:</p> <ul> <li>OGC API - Environmental Data Retrieval - Part 1</li> </ul> <p>All of the test suites are available from the OGC Validator.  </p> <p>Implementations</p> <p>Implementations can be found on the implementations page.</p>"},{"location":"api-deep-dive/environmental-data-retrieval/#usage","title":"Usage","text":"<p>OGC API - Environmental Data Retrieval provides a family of lightweight query interfaces to access spatio-temporal data resources by requesting data at a position, within an area, along a trajectory or through a corridor. A spatio-temporal data resource is a collection of spatio-temporal data that can be sampled using the EDR query pattern geometries.</p> <p>The standard provides a standard interface for requesting vector geospatial data consisting of geographic features and their properties. The benefit of this is that client applications can request source data from multiple implementations of the API, and then render the data for display or process the data further as part of a workflow. The standard enables the data to be accessed consistently with other data. Feature properties encoded using common data types such as text strings, date and time can also be accessed consistently.</p>"},{"location":"api-deep-dive/environmental-data-retrieval/#relation-to-other-ogc-standards","title":"Relation to other OGC Standards","text":"<ul> <li>OGC API - Features: The EDR API is completely compatible with OGC     API\u2009-\u2009Features\u2009-\u2009Part 1: Core (OGC 17-069r3), in that it     supports Collections and Items. It extends the Collection     functionality by allowing 'Instances', a form of 'collection of     collections'. The EDR API also supports the retrieval of     spatiotemporal data by named location as well as coordinates.</li> <li>Moving Features: The Moving Features Standards are concerned with     things that move along a trajectory, and simultaneously change their     orientation through rigid body rotation. The EDR API does not have     the concept of orientation, or foliation or prisms. Moving Features     and EDR API do share a common conceptual definition, from ISO, of a     Trajectory, but the Moving Features Standards encode trajectories in     GML, CSV and Moving Features JSON, whereas the EDR API encodes     trajectories in WKT.</li> <li>Web Coverage Service (WCS) and Coverage Implementation Schema (CIS):     The primary messaging mechanism of the EDR API is JSON, including     CoverageJSON, over HTTP(S). Implementations of the EDR API are     described using the OpenAPI V3.0 specification. The EDR API is     consistent with the WCS and CIS standards but does not require the     end user or developer to use the terms Domain and RangeSet. The EDR     API can also be used to generate a single query against a collection     of coverages, providing the data coordinate reference systems are     consistent.</li> <li>The OGC SensorThings API: SensorThings API follows OData's     specification for requesting entities. In contrast, the EDR API     makes use of the OpenAPI V3.0 specification for describing resource     paths, query options, JSON schema, and other aspects. Further, the     EDR API allows for retrieval of coverage data and HTML responses --     both of which are not supported by the SensorThings API.</li> <li>Sensor Observation Service (SOS): The EDR API allows for retrieval     of coverage data and HTML responses -- both of which are not     supported by the SOS standard. Further, SOS implementations use the     GetCapabilities operation for providing descriptions of available     resources. In contrast, the EDR API uses OpenAPI definition     documents for describing available interfaces.</li> </ul>"},{"location":"api-deep-dive/environmental-data-retrieval/#overview-of-resources","title":"Overview of Resources","text":"<p>OGC API - Environmental Data Retrieval Standard defines the resources listed in the following table.</p> Overview of OGC API - EDR resources Resource Method Path Purpose Landing page GET / This is the top-level resource, which serves as an entry point. Conformance declaration GET /conformance This resource presents information about the functionality that is implemented by the server. API definition GET /api This resource provides metadata about the API itself. Note use of /api on the server is optional and the API definition may be hosted on completely separate server. Collections metadata GET /collections Metadata describing the collections of data available from this API. Single Collection metadata GET /collections/{collectionId} Metadata describing the collection of data which has the unique identifier {collectionId}. Items metadata GET /collections/{collectionId}/items Retrieve metadata about available items. Query data GET /collections/{collectionId}/{queryType} Retrieve data according to the query pattern Query instances GET /collections/{collectionId}/instances Retrieve metadata about instances of a collection"},{"location":"api-deep-dive/environmental-data-retrieval/#example","title":"Example","text":"<p>This demonstration server publishes environmental data through an interface that conforms to the OGC API - Environmental Data Retrieval standard. A client application is available here .</p> <p>An example request that can be used to retrieve data from the METAR Observation collection is here .</p> <p>Note that the response to the request is GeoJSON in this case.</p> <p>Alternatively, the same data can be retrieved in CoverageJSON format, through this request .</p> <p>Note that this demonstration server offers data from recent observations, therefore you may need to update the values of the <code>datetime</code> parameter to the current day in order to access available METAR observation.</p>"},{"location":"api-deep-dive/environmental-data-retrieval/#resources","title":"Resources","text":"<p>This section provides basic information about the types of resources that OGC API - Environmental Data Retrieval offers.</p> <p>Each resource provides links that relate to resources. This enables a client application to navigate the resources, from the landing page through to the individual features. The server identifies the relationship between a resource and other linked resources through a link relation type, represented by the attribute <code>rel</code>. The link relation types used by implementations of the OGC API - Environmental Data Retrieval can be found in Section 6.2 of the standard.</p>"},{"location":"api-deep-dive/environmental-data-retrieval/#landing-page","title":"Landing page","text":"<p>The landing page is the top-level resource that serves as an entry point. A client application needs to know the location of the landing page of the server. From the landing page, the client application can retrieve links to the Conformance declaration, Collection and API definition paths. An example landing page is at http://labs.metoffice.gov.uk/edr</p> <p>The link to the API definition is identified through the <code>service-desc</code> and <code>service-doc</code> link relation types.</p> <p>The link to the Conformance declaration is identified through the <code>conformance</code> link relation type.</p> <p>The link to the Collections is identified through the <code>data</code> link relation type.</p> <p>An extract from the landing page of a demo server is shown below.</p> <pre><code>{\n\"title\": \"Environmental Data Retrevial API concept demonstrator\",\n\"description\": \"Example EDR API (not for operational use)\",\n\"keywords\": [\n  \"position\",\n  \"area\",\n  \"cube\",\n  \"trajectory\",\n  \"weather\",\n  \"data\",\n  \"api\"\n],\n\"terms_of_service\": \"None\",\n\"provider\": {\n  \"name\": \"Organization Name\",\n  \"url\": \"http://example.org\"\n},\n\"contact\": {\n  \"email\": \"you@example.org\",\n  \"phone\": \"+001-234-567-89\",\n  \"fax\": \"+001-234-567-89\",\n  \"hours\": \"Hours of Service\",\n  \"instructions\": \"During hours of service.  Off on weekends.\",\n  \"address\": \"Mailing Address\",\n  \"postalcode\": \"Zip or Postal Code\",\n  \"city\": \"City\",\n  \"stateorprovince\": \"Administrative Area\",\n  \"country\": \"Country\"\n},\n\"links\": [\n  {\n    \"href\": \"http://labs.metoffice.gov.uk/edr/api\",\n    \"hreflang\": \"en\",\n    \"rel\": \"service-doc\",\n    \"type\": \"application/vnd.oai.openapi+json;version=3.0\",\n    \"title\": \"\",\n    \"variables\": null\n  },\n  {\n    \"href\": \"http://labs.metoffice.gov.uk/edr/conformance\",\n    \"hreflang\": \"en\",\n    \"rel\": \"conformance\",\n    \"type\": \"application/json\",\n    \"title\": \"\",\n    \"variables\": null\n  },\n  {\n    \"href\": \"http://labs.metoffice.gov.uk/edr/collections\",\n    \"hreflang\": \"en\",\n    \"rel\": \"collection\",\n    \"type\": \"application/json\",\n    \"title\": \"\",\n    \"variables\": null\n  }\n]\n}\n</code></pre>"},{"location":"api-deep-dive/environmental-data-retrieval/#conformance-declaration","title":"Conformance declaration","text":"<p>An implementation of OGC API - Environmental Data Retrieval describes the capabilities that it supports by declaring which conformance classes it implements. The Conformance declaration states the conformance classes from standards or community specifications, identified by a URI, that the API conforms to. Clients can then use this information, although they are not required to. Accessing the Conformance declaration using HTTP GET returns the list of URIs of conformance classes implemented by the server. Conformance classes describe the behavior a server should implement in order to meet one or more sets of requirements specified in a standard.</p> <p>Below is an extract from the response to the request http://labs.metoffice.gov.uk/edr/conformance</p> <pre><code>{\n \"conformsTo\":[\n    \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core\",\n    \"http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections\",\n    \"http://www.opengis.net/spec/ogcapi-edr-1/1.0/conf/core\",\n    \"http://www.opengis.net/spec/ogcapi-edr-1/1.0/conf/oas30\",\n    \"http://www.opengis.net/spec/ogcapi-edr-1/1.0/conf/html\",\n    \"http://www.opengis.net/spec/ogcapi-edr-1/1.0/conf/geojson\",\n    \"http://www.opengis.net/spec/ogcapi-edr-1/1.0/conf/coveragejson\",\n    \"http://www.opengis.net/spec/ogcapi-edr-1/1.0/conf/wkt\"\n ]\n }\n</code></pre>"},{"location":"api-deep-dive/environmental-data-retrieval/#api-definition","title":"API Definition","text":"<p>Given OGC API - Environmental Data Retrieval uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/environmental-data-retrieval/#collections-metadata","title":"Collections metadata","text":"<p>Data offered through an implementation of OGC API - Environmental Data Retrevial is organized into one or more feature collections. The <code>Collections</code> resource provides information about and access to the list of collections.</p> <p>For each collection, there is a link to the detailed description of the collection (represented by the path /collections/{collectionId} and link relation self).</p> <p>The following information is provided by the server to describe each collection:</p> <ul> <li>A local identifier for the collection that is unique for the dataset</li> <li>A list of coordinate reference systems (CRS) in which geometries may     be returned by the server</li> <li>An optional title and description for the collection</li> <li>An optional extent that can be used to provide an indication of the     spatial and temporal extent of the collection</li> <li>An optional indicator about the type of the items in the collection     (the default value, if the indicator is not provided, is     <code>feature</code>).</li> </ul> <p>For each collection, there are links to retrieve data according to supported query patterns (represented by the path /collections/{collectionId}/{queryType} and link relation data).</p> <p>For each collection, there is a link to the metadata about items available in the collection (represented by the path /collections/{collectionId}/items and link relation items) and other information about the collection.</p> <p>Below is an extract from the response to the request http://labs.metoffice.gov.uk/edr/collections</p> <pre><code>{\n  \"links\": [\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/edr/collections\",\n      \"hreflang\": \"en\",\n      \"rel\": \"self\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/edr/collections?f=html\",\n      \"hreflang\": \"en\",\n      \"rel\": \"alternate\",\n      \"type\": \"text/html\"\n    },\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/edr/collections?f=xml\",\n      \"hreflang\": \"en\",\n      \"rel\": \"alternate\",\n      \"type\": \"application/xml\"\n    }\n  ],\n  \"collections\": [\n    {\n      \"id\": \"metar_demo\",\n      \"title\": \"Metar observations EDR demonstrator\",\n      \"description\": \"API to access 24 hours of Global Metar Observation data (not for operational use)\",\n      \"keywords\": [\n        \"Metar observation\",\n        \"ICAO identifier\",\n        \"Wind Direction\",\n        \"Wind Speed\",\n        \"Wind Gust\",\n        \"Visibility\",\n        \"Air Temperature\",\n        \"Dew point\",\n        \"Runway Visibility\",\n        \"Weather\",\n        \"Sky condition\",\n        \"Mean Sea Level Pressure\",\n        \"Station Level Pressure\",\n        \"description\",\n        \"restrictions\",\n        \"collection\",\n        \"position\",\n        \"radius\",\n        \"area\",\n        \"location\"\n      ],\n      \"links\": [\n        {\n          \"href\": \"https://www.aviationweather.gov/metar/help\",\n          \"hreflang\": \"en\",\n          \"rel\": \"service-doc\",\n          \"type\": \"text/html\",\n          \"title\": \"\"\n        },\n        {\n          \"href\": \"https://www.weather.gov/disclaimer\",\n          \"hreflang\": \"en\",\n          \"rel\": \"restrictions\",\n          \"type\": \"text/html\",\n          \"title\": \"\"\n        },\n        {\n          \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/\",\n          \"hreflang\": \"en\",\n          \"rel\": \"collection\",\n          \"type\": \"collection\",\n          \"title\": \"\"\n        },\n        {\n          \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/position\",\n          \"hreflang\": \"en\",\n          \"rel\": \"data\"\n        },\n        {\n          \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/radius\",\n          \"hreflang\": \"en\",\n          \"rel\": \"data\"\n        },\n        {\n          \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/area\",\n          \"hreflang\": \"en\",\n          \"rel\": \"data\"\n        },\n        {\n          \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/locations\",\n          \"hreflang\": \"en\",\n          \"rel\": \"data\"\n        }\n      ],\n      \"extent\": {\n        \"spatial\": {\n          \"bbox\": [\n            -180.0,\n            -89.9,\n            180.0,\n            89.9\n          ],\n          \"crs\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n        },\n        \"temporal\": {\n          \"interval\": [\n            \"R36/2021-10-03T01:00Z/PT1H\"\n          ],\n          \"trs\": \"TIMECRS[\\\"DateTime\\\",TDATUM[\\\"Gregorian Calendar\\\"],CS[TemporalDateTime,1],AXIS[\\\"Time (T)\\\",future]\"\n        }\n      },\n      \"data_queries\": {\n        \"position\": {\n          \"link\": {\n            \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/position\",\n            \"hreflang\": \"en\",\n            \"rel\": \"data\",\n            \"variables\": {\n              \"title\": \"Position query\",\n              \"query_type\": \"position\",\n              \"output_formats\": [\n                \"CoverageJSON\",\n                \"GeoJSON\",\n                \"IWXXM\"\n              ],\n              \"default_output_format\": \"GeoJSON\",\n              \"crs_details\": [\n                {\n                  \"crs\": \"CRS84\",\n                  \"wkt\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n                }\n              ]\n            }\n          }\n        },\n        \"radius\": {\n          \"link\": {\n            \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/radius\",\n            \"hreflang\": \"en\",\n            \"rel\": \"data\",\n            \"variables\": {\n              \"title\": \"Radius query\",\n              \"description\": \"Radius query\",\n              \"query_type\": \"radius\",\n              \"output_formats\": [\n                \"CoverageJSON\",\n                \"GeoJSON\",\n                \"IWXXM\"\n              ],\n              \"default_output_format\": \"GeoJSON\",\n              \"within_units\": [\n                \"km\",\n                \"miles\"\n              ],\n              \"crs_details\": [\n                {\n                  \"crs\": \"CRS84\",\n                  \"wkt\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n                }\n              ]\n            }\n          }\n        },\n        \"area\": {\n          \"link\": {\n            \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/area\",\n            \"hreflang\": \"en\",\n            \"rel\": \"data\",\n            \"variables\": {\n              \"title\": \"Area query\",\n              \"query_type\": \"area\",\n              \"output_formats\": [\n                \"CoverageJSON\",\n                \"GeoJSON\",\n                \"IWXXM\"\n              ],\n              \"default_output_format\": \"CoverageJSON\",\n              \"crs_details\": [\n                {\n                  \"crs\": \"CRS84\",\n                  \"wkt\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n                }\n              ]\n            }\n          }\n        },\n        \"locations\": {\n          \"link\": {\n            \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/locations\",\n            \"hreflang\": \"en\",\n            \"rel\": \"data\",\n            \"variables\": {\n              \"title\": \"Location query\",\n              \"description\": \"Location query\",\n              \"query_type\": \"locations\",\n              \"output_formats\": [\n                \"CoverageJSON\",\n                \"GeoJSON\",\n                \"CSV\"\n              ],\n              \"default_output_format\": \"GeoJSON\",\n              \"crs_details\": [\n                {\n                  \"crs\": \"CRS84\",\n                  \"wkt\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n                }\n              ]\n            }\n          }\n        }\n      },\n      \"crs\": [\n        \"CRS84\"\n      ],\n      \"output_formats\": [\n        \"CoverageJSON\",\n        \"GeoJSON\",\n        \"IWXXM\"\n      ],\n      \"parameter_names\": {\n        \"Metar observation\": {\n          \"type\": \"Parameter\",\n          \"description\": \"Source Metar observation\",\n          \"unit\": {\n            \"label\": \"\",\n            \"symbol\": {\n              \"value\": \"\",\n              \"type\": \"http://codes.wmo.int/wmdr/DataFormat/FM-15-metar\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/wmdr/DataFormat/FM-15-metar\",\n            \"label\": \"Metar observation\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"ICAO identifier\": {\n          \"type\": \"Parameter\",\n          \"description\": \"ICAO identifier\",\n          \"unit\": {\n            \"label\": \"\",\n            \"symbol\": {\n              \"value\": \"\",\n              \"type\": \"https://en.wikipedia.org/wiki/ICAO_airport_code\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/bufr4/b/01/_063\",\n            \"label\": \"ICAO identifier\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"Wind Direction\": {\n          \"type\": \"Parameter\",\n          \"description\": \"Wind Direction\",\n          \"unit\": {\n            \"label\": \"degree true\",\n            \"symbol\": {\n              \"value\": \"\\u00b0\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/degree\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/common/quantity-kind/_aerodromeMeanWindDirection\",\n            \"label\": \"Wind Direction\"\n          },\n          \"measurementType\": {\n            \"method\": \"mean\",\n            \"period\": \"-PT10M/PT0M\"\n          }\n        },\n        \"Wind Speed\": {\n          \"type\": \"Parameter\",\n          \"description\": \"Wind Speed\",\n          \"unit\": {\n            \"label\": \"mph\",\n            \"symbol\": {\n              \"value\": \"mph\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/mph\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \" http://codes.wmo.int/common/quantity-kind/aerodromeMeanWindSpeed\",\n            \"label\": \"Wind Speed\"\n          },\n          \"measurementType\": {\n            \"method\": \"mean\",\n            \"period\": \"-PT10M/PT0M\"\n          }\n        },\n        \"Wind Gust\": {\n          \"type\": \"Parameter\",\n          \"description\": \"Wind Gust\",\n          \"unit\": {\n            \"label\": \"mph\",\n            \"symbol\": {\n              \"value\": \"mph\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/mph\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/common/quantity-kind/_aerodromeMaximumWindGustSpeed\",\n            \"label\": \"Wind Gust\"\n          },\n          \"measurementType\": {\n            \"method\": \"maximum\",\n            \"period\": \"-PT10M/PT0M\"\n          }\n        },\n        \"Visibility\": {\n          \"type\": \"Parameter\",\n          \"description\": \"Visibility\",\n          \"unit\": {\n            \"label\": \"m\",\n            \"symbol\": {\n              \"value\": \"m\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/m\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/common/quantity-kind/_horizontalVisibility\",\n            \"label\": \"Visibility\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"Air Temperature\": {\n          \"type\": \"Parameter\",\n          \"description\": \"\",\n          \"unit\": {\n            \"label\": \"degC\",\n            \"symbol\": {\n              \"value\": \"\\u00b0C\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/degC\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/common/quantity-kind/_airTemperature\",\n            \"label\": \"Air Temperature\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"Dew point\": {\n          \"type\": \"Parameter\",\n          \"description\": \"\",\n          \"unit\": {\n            \"label\": \"degC\",\n            \"symbol\": {\n              \"value\": \"\\u00b0C\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/degC\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/common/quantity-kind/_dewPointTemperature\",\n            \"label\": \"Dew point\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"Runway Visibility\": {\n          \"type\": \"Parameter\",\n          \"description\": \"Runway Visibile Range\",\n          \"unit\": {\n            \"label\": \"m\",\n            \"symbol\": {\n              \"value\": \"m\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/m\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/common/quantity-kind/_runwayVisualRangeRvr\",\n            \"label\": \"Runway Visibility\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"Weather\": {\n          \"type\": \"Parameter\",\n          \"description\": \"Aerodrome recent weather\",\n          \"unit\": {\n            \"label\": \"weather\",\n            \"symbol\": {\n              \"value\": \"\",\n              \"type\": \"http://codes.wmo.int/49-2/AerodromeRecentWeather\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/49-2/AerodromeRecentWeather\",\n            \"label\": \"Weather\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"Sky condition\": {\n          \"type\": \"Parameter\",\n          \"description\": \"Sky condition\",\n          \"unit\": {\n            \"label\": \"sky\",\n            \"symbol\": {\n              \"value\": \"\",\n              \"type\": \"http://{server}\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"\",\n            \"label\": \"Sky condition\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"Mean Sea Level Pressure\": {\n          \"type\": \"Parameter\",\n          \"description\": \"\",\n          \"unit\": {\n            \"label\": \"hPa\",\n            \"symbol\": {\n              \"value\": \"hPa\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/hPa\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/bufr4/b/10/_051\",\n            \"label\": \"Mean Sea Level Pressure\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        },\n        \"Station Level Pressure\": {\n          \"type\": \"Parameter\",\n          \"description\": \"\",\n          \"unit\": {\n            \"label\": \"hPa\",\n            \"symbol\": {\n              \"value\": \"hPa\",\n              \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/hPa\"\n            }\n          },\n          \"observedProperty\": {\n            \"id\": \"http://codes.wmo.int/bufr4/b/10/_004\",\n            \"label\": \"Station Level Pressure\"\n          },\n          \"measurementType\": {\n            \"method\": \"instantaneous\",\n            \"period\": \"PT0M\"\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>The Collection resource provides detailed information about the collection identified in a request. Some of the information returned includes the supported geographic extent, data queries, coordinate reference systems, output formats, and parameter names.</p> <p>Below is an extract from the response to the request http://labs.metoffice.gov.uk/edr/collections/metar_demo?f=json</p> <pre><code>{\n  \"id\": \"metar_demo\",\n  \"title\": \"Metar observations EDR demonstrator\",\n  \"description\": \"API to access 24 hours of Global Metar Observation data (not for operational use)\",\n  \"keywords\": [\n    \"Metar observation\",\n    \"ICAO identifier\",\n    \"Wind Direction\",\n    \"Wind Speed\",\n    \"Wind Gust\",\n    \"Visibility\",\n    \"Air Temperature\",\n    \"Dew point\",\n    \"Runway Visibility\",\n    \"Weather\",\n    \"Sky condition\",\n    \"Mean Sea Level Pressure\",\n    \"Station Level Pressure\",\n    \"description\",\n    \"restrictions\",\n    \"collection\",\n    \"position\",\n    \"radius\",\n    \"area\",\n    \"location\"\n  ],\n  \"links\": [\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/collections/metar_demo\",\n      \"hreflang\": \"en\",\n      \"rel\": \"self\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/collections/metar_demo?f=html\",\n      \"hreflang\": \"en\",\n      \"rel\": \"alternate\",\n      \"type\": \"text/html\"\n    },\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/collections/metar_demo?f=xml\",\n      \"hreflang\": \"en\",\n      \"rel\": \"alternate\",\n      \"type\": \"application/xml\"\n    },\n    {\n      \"href\": \"https://www.aviationweather.gov/metar/help\",\n      \"hreflang\": \"en\",\n      \"rel\": \"service-doc\",\n      \"type\": \"text/html\",\n      \"title\": \"\"\n    },\n    {\n      \"href\": \"https://www.weather.gov/disclaimer\",\n      \"hreflang\": \"en\",\n      \"rel\": \"restrictions\",\n      \"type\": \"text/html\",\n      \"title\": \"\"\n    },\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/position\",\n      \"hreflang\": \"en\",\n      \"rel\": \"data\"\n    },\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/radius\",\n      \"hreflang\": \"en\",\n      \"rel\": \"data\"\n    },\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/area\",\n      \"hreflang\": \"en\",\n      \"rel\": \"data\"\n    },\n    {\n      \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/locations\",\n      \"hreflang\": \"en\",\n      \"rel\": \"data\"\n    }\n  ],\n  \"extent\": {\n    \"spatial\": {\n      \"bbox\": [\n        -180.0,\n        -89.9,\n        180.0,\n        89.9\n      ],\n      \"crs\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n    },\n    \"temporal\": {\n      \"interval\": [\n        \"R36/2021-10-03T03:00Z/PT1H\"\n      ],\n      \"trs\": \"TIMECRS[\\\"DateTime\\\",TDATUM[\\\"Gregorian Calendar\\\"],CS[TemporalDateTime,1],AXIS[\\\"Time (T)\\\",future]\"\n    }\n  },\n  \"data_queries\": {\n    \"position\": {\n      \"link\": {\n        \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/position\",\n        \"hreflang\": \"en\",\n        \"rel\": \"data\",\n        \"variables\": {\n          \"title\": \"Position query\",\n          \"query_type\": \"position\",\n          \"output_formats\": [\n            \"CoverageJSON\",\n            \"GeoJSON\",\n            \"IWXXM\"\n          ],\n          \"default_output_format\": \"GeoJSON\",\n          \"crs_details\": [\n            {\n              \"crs\": \"CRS84\",\n              \"wkt\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n            }\n          ]\n        }\n      }\n    },\n    \"radius\": {\n      \"link\": {\n        \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/radius\",\n        \"hreflang\": \"en\",\n        \"rel\": \"data\",\n        \"variables\": {\n          \"title\": \"Radius query\",\n          \"description\": \"Radius query\",\n          \"query_type\": \"radius\",\n          \"output_formats\": [\n            \"CoverageJSON\",\n            \"GeoJSON\",\n            \"IWXXM\"\n          ],\n          \"default_output_format\": \"GeoJSON\",\n          \"within_units\": [\n            \"km\",\n            \"miles\"\n          ],\n          \"crs_details\": [\n            {\n              \"crs\": \"CRS84\",\n              \"wkt\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n            }\n          ]\n        }\n      }\n    },\n    \"area\": {\n      \"link\": {\n        \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/area\",\n        \"hreflang\": \"en\",\n        \"rel\": \"data\",\n        \"variables\": {\n          \"title\": \"Area query\",\n          \"query_type\": \"area\",\n          \"output_formats\": [\n            \"CoverageJSON\",\n            \"GeoJSON\",\n            \"IWXXM\"\n          ],\n          \"default_output_format\": \"CoverageJSON\",\n          \"crs_details\": [\n            {\n              \"crs\": \"CRS84\",\n              \"wkt\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n            }\n          ]\n        }\n      }\n    },\n    \"locations\": {\n      \"link\": {\n        \"href\": \"http://labs.metoffice.gov.uk/edr/collections/metar_demo/locations\",\n        \"hreflang\": \"en\",\n        \"rel\": \"data\",\n        \"variables\": {\n          \"title\": \"Location query\",\n          \"description\": \"Location query\",\n          \"query_type\": \"locations\",\n          \"output_formats\": [\n            \"CoverageJSON\",\n            \"GeoJSON\",\n            \"CSV\"\n          ],\n          \"default_output_format\": \"GeoJSON\",\n          \"crs_details\": [\n            {\n              \"crs\": \"CRS84\",\n              \"wkt\": \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.01745329251994328,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"\n            }\n          ]\n        }\n      }\n    }\n  },\n  \"crs\": [\n    \"CRS84\"\n  ],\n  \"output_formats\": [\n    \"CoverageJSON\",\n    \"GeoJSON\",\n    \"IWXXM\"\n  ],\n  \"parameter_names\": {\n    \"Metar observation\": {\n      \"type\": \"Parameter\",\n      \"description\": \"Source Metar observation\",\n      \"unit\": {\n        \"label\": \"\",\n        \"symbol\": {\n          \"value\": \"\",\n          \"type\": \"http://codes.wmo.int/wmdr/DataFormat/FM-15-metar\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/wmdr/DataFormat/FM-15-metar\",\n        \"label\": \"Metar observation\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"ICAO identifier\": {\n      \"type\": \"Parameter\",\n      \"description\": \"ICAO identifier\",\n      \"unit\": {\n        \"label\": \"\",\n        \"symbol\": {\n          \"value\": \"\",\n          \"type\": \"https://en.wikipedia.org/wiki/ICAO_airport_code\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/bufr4/b/01/_063\",\n        \"label\": \"ICAO identifier\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"Wind Direction\": {\n      \"type\": \"Parameter\",\n      \"description\": \"Wind Direction\",\n      \"unit\": {\n        \"label\": \"degree true\",\n        \"symbol\": {\n          \"value\": \"\\u00b0\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/degree\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/common/quantity-kind/_aerodromeMeanWindDirection\",\n        \"label\": \"Wind Direction\"\n      },\n      \"measurementType\": {\n        \"method\": \"mean\",\n        \"period\": \"-PT10M/PT0M\"\n      }\n    },\n    \"Wind Speed\": {\n      \"type\": \"Parameter\",\n      \"description\": \"Wind Speed\",\n      \"unit\": {\n        \"label\": \"mph\",\n        \"symbol\": {\n          \"value\": \"mph\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/mph\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \" http://codes.wmo.int/common/quantity-kind/aerodromeMeanWindSpeed\",\n        \"label\": \"Wind Speed\"\n      },\n      \"measurementType\": {\n        \"method\": \"mean\",\n        \"period\": \"-PT10M/PT0M\"\n      }\n    },\n    \"Wind Gust\": {\n      \"type\": \"Parameter\",\n      \"description\": \"Wind Gust\",\n      \"unit\": {\n        \"label\": \"mph\",\n        \"symbol\": {\n          \"value\": \"mph\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/mph\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/common/quantity-kind/_aerodromeMaximumWindGustSpeed\",\n        \"label\": \"Wind Gust\"\n      },\n      \"measurementType\": {\n        \"method\": \"maximum\",\n        \"period\": \"-PT10M/PT0M\"\n      }\n    },\n    \"Visibility\": {\n      \"type\": \"Parameter\",\n      \"description\": \"Visibility\",\n      \"unit\": {\n        \"label\": \"m\",\n        \"symbol\": {\n          \"value\": \"m\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/m\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/common/quantity-kind/_horizontalVisibility\",\n        \"label\": \"Visibility\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"Air Temperature\": {\n      \"type\": \"Parameter\",\n      \"description\": \"\",\n      \"unit\": {\n        \"label\": \"degC\",\n        \"symbol\": {\n          \"value\": \"\\u00b0C\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/degC\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/common/quantity-kind/_airTemperature\",\n        \"label\": \"Air Temperature\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"Dew point\": {\n      \"type\": \"Parameter\",\n      \"description\": \"\",\n      \"unit\": {\n        \"label\": \"degC\",\n        \"symbol\": {\n          \"value\": \"\\u00b0C\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/degC\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/common/quantity-kind/_dewPointTemperature\",\n        \"label\": \"Dew point\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"Runway Visibility\": {\n      \"type\": \"Parameter\",\n      \"description\": \"Runway Visibile Range\",\n      \"unit\": {\n        \"label\": \"m\",\n        \"symbol\": {\n          \"value\": \"m\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/m\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/common/quantity-kind/_runwayVisualRangeRvr\",\n        \"label\": \"Runway Visibility\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"Weather\": {\n      \"type\": \"Parameter\",\n      \"description\": \"Aerodrome recent weather\",\n      \"unit\": {\n        \"label\": \"weather\",\n        \"symbol\": {\n          \"value\": \"\",\n          \"type\": \"http://codes.wmo.int/49-2/AerodromeRecentWeather\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/49-2/AerodromeRecentWeather\",\n        \"label\": \"Weather\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"Sky condition\": {\n      \"type\": \"Parameter\",\n      \"description\": \"Sky condition\",\n      \"unit\": {\n        \"label\": \"sky\",\n        \"symbol\": {\n          \"value\": \"\",\n          \"type\": \"http://{server}\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"\",\n        \"label\": \"Sky condition\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"Mean Sea Level Pressure\": {\n      \"type\": \"Parameter\",\n      \"description\": \"\",\n      \"unit\": {\n        \"label\": \"hPa\",\n        \"symbol\": {\n          \"value\": \"hPa\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/hPa\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/bufr4/b/10/_051\",\n        \"label\": \"Mean Sea Level Pressure\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    },\n    \"Station Level Pressure\": {\n      \"type\": \"Parameter\",\n      \"description\": \"\",\n      \"unit\": {\n        \"label\": \"hPa\",\n        \"symbol\": {\n          \"value\": \"hPa\",\n          \"type\": \"http://labs.metoffice.gov.uk/edr/metadata/units/hPa\"\n        }\n      },\n      \"observedProperty\": {\n        \"id\": \"http://codes.wmo.int/bufr4/b/10/_004\",\n        \"label\": \"Station Level Pressure\"\n      },\n      \"measurementType\": {\n        \"method\": \"instantaneous\",\n        \"period\": \"PT0M\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api-deep-dive/environmental-data-retrieval/#query-resources","title":"Query Resources","text":"<p>Query resources are spatio-temporal queries which support operation of the API for the access and use of the spatio-temporal data resources.</p> <p>Query resources share several common parameters, which makes it easier for developers to implement the queries.</p> <p>Where the query applies to a collection, the pattern is as follows:</p> <p><code>/collections/{collectionId}/{queryType}</code></p> <p>The parameter <code>queryType</code> can be one of the following:</p> <ul> <li>position</li> <li>area</li> <li>cube</li> <li>trajectory</li> <li>corridor</li> <li>radius</li> <li>instances</li> <li>locations</li> <li>items</li> </ul> <p>Where the query applies to an instance, the pattern is as follows:</p> <p><code>/collections/{collectionId}/instances/{instanceId}/{queryType}</code></p>"},{"location":"api-deep-dive/environmental-data-retrieval/#area-query-resources-of-ogc-api-edr","title":"Area Query Resources of OGC API - EDR","text":"<p>An area is a region specified with a geographic envelope that may have vertical dimension. An illustration, created using NASA WorldWind, is shown below.</p> <p></p> <p>The <code>area</code> query resource returns data for the defined area. The resource offers a convenience mechanism for querying the API by area, using a Well Known Text (WKT) POLYGON geometry.</p> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionId}/area</code></p> <p>The paths accepts the following parameters:</p> <ul> <li>coords</li> <li>z</li> <li>parameter-name</li> <li>datetime</li> <li>crs</li> <li>f</li> </ul> <p>An example request is shown below.</p> <p><code>http://example.org/edr/collections/gfs-pressure_at_height/area?coords=POLYGON((-0.898132%2051.179362,-0.909119%2051.815488,0.552063%2051.818884,0.560303%2051.191414,-0.898132%2051.179362))&amp;parameter-name=Pressure_height_above_ground&amp;datetime=2022-01-19T06:00Z/2022-01-19T12:00Z&amp;z=80/80&amp;crs=CRS84&amp;f=CoverageJSON</code></p>"},{"location":"api-deep-dive/environmental-data-retrieval/#corridor-query-resources-of-ogc-api-edr","title":"Corridor Query Resources of OGC API - EDR","text":"<p>A corridor is a two parameter set of points around a trajectory. An illustration, created using NASA WorldWind, is shown below.</p> <p></p> <p>The <code>corridor</code> query resource returns data for the defined corridor. The resource offers a convenience mechanism for querying the API by corridor, using a Well Known Text (WKT) LINESTRING geometry, or alternatively subclasses LINESTRINGZ, LINESTRINGM, LINESTRINGZM.</p> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionId}/corridor</code></p> <p>The paths accepts the following parameters:</p> <ul> <li>coords</li> <li>corridor-width</li> <li>corridor-height</li> <li>width-units</li> <li>height-units</li> <li>z</li> <li>parameter-name</li> <li>datetime</li> <li>crs</li> <li>f</li> </ul>"},{"location":"api-deep-dive/environmental-data-retrieval/#cube-query-resources-of-ogc-api-edr","title":"Cube Query Resources of OGC API - EDR","text":"<p>A cube is a rectangular area, with a vertical extent. An illustration, created using NASA WorldWind, is shown below.</p> <p></p> <p>The <code>cube</code> query resource returns data for a defined cube. The resource offers a convenience mechanism for querying the API using a bounding box (BBOX) defining a cube.</p> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionId}/cube</code></p> <p>The paths accepts the following parameters:</p> <ul> <li>bbox</li> <li>z</li> <li>parameter-name</li> <li>datetime</li> <li>crs</li> <li>f</li> </ul>"},{"location":"api-deep-dive/environmental-data-retrieval/#instances-query-resources-of-ogc-api-edr","title":"Instances Query Resources of OGC API - EDR","text":"<p>The <code>instances</code> query resource retrieves metadata about instances of a collection. The resource enables support for multiple instances or versions of the same underlying data source to be accessed by the API.</p> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionID}/instances/{instanceID}/{queryType}</code></p>"},{"location":"api-deep-dive/environmental-data-retrieval/#items-features-query-resources-of-ogc-api-edr","title":"Items (Features) Query Resources of OGC API - EDR","text":"<p>The <code>items</code> query resource offers an OGC API\u2009-\u2009Features endpoint that may be used to catalog pre-existing EDR sampling features.</p> <p>Example use cases of this resource include:</p> <ul> <li>existence of a monitoring location</li> <li>cached query</li> <li>cataloguing of anomalies in a data</li> </ul> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionId}/items</code></p> <p>An example request is below.</p> <p><code>http://example.org/edr/collections/mocov-daily_global/items</code></p>"},{"location":"api-deep-dive/environmental-data-retrieval/#locations-query-resources-of-ogc-api-edr","title":"Locations Query Resources of OGC API - EDR","text":"<p>The <code>locations</code> query resource returns a list of location identifiers and relevant metadata for the collection.</p> <p>The location identifier can be anything as long as it is unique for the required position (e.g. a GeoHash).</p> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionId}/locations</code></p> <p>An example request is below.</p> <p><code>http://example.org/edr/collections/obs_demo/locations</code></p>"},{"location":"api-deep-dive/environmental-data-retrieval/#position-query-resources-of-ogc-api-edr","title":"Position Query Resources of OGC API - EDR","text":"<p>A position is a data type that describes a point or geometry potentially occupied by an object or person. An illustration, created using NASA WorldWind, is shown below.</p> <p></p> <p>The <code>position</code> query resource returns data for the requested position. The resource offers a convenience mechanism for querying the API using a Well Known Text (WKT) POINT geometry defining a position.</p> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionId}/position</code></p> <p>The paths accepts the following parameters:</p> <ul> <li>coords</li> <li>z</li> <li>parameter-name</li> <li>datetime</li> <li>crs</li> <li>f</li> </ul> <p>An example request is shown below.</p> <p><code>http://example.org/edr/collections/obs_demo/position?coords=POINT(0.00577%2051.562608)&amp;parameter-name=Wind%20Direction&amp;datetime=2022-01-19T10:00Z/2022-01-19T12:00Z&amp;crs=CRS84&amp;f=GeoJSON</code></p>"},{"location":"api-deep-dive/environmental-data-retrieval/#radius-query-resources-of-ogc-api-edr","title":"Radius Query Resources of OGC API - EDR","text":"<p>A radius is a region specified with a geographic position and radial distance. An illustration, created using NASA WorldWind, is shown below.</p> <p></p> <p>The <code>radius</code> query resource returns data for a defined radius. The resource offers a convenience mechanism for querying the API by radius.</p> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionId}/radius</code></p> <p>The paths accepts the following parameters:</p> <ul> <li>coords</li> <li>within</li> <li>width-units</li> <li>z</li> <li>parameter-name</li> <li>datetime</li> <li>crs</li> <li>f</li> </ul> <p>An example request is shown below.</p> <p><code>http://example.org/edr/collections/obs_demo/radius?coords=POINT(-0.095882%2051.512983)&amp;within=50&amp;within-units=km&amp;parameter-name=Wind%20Direction&amp;datetime=2022-01-19T04:00Z/2022-01-19T06:00Z&amp;crs=CRS84&amp;f=GeoJSON</code></p>"},{"location":"api-deep-dive/environmental-data-retrieval/#trajectory-query-resources-of-ogc-api-edr","title":"Trajectory Query Resources of OGC API - EDR","text":"<p>A trajectory is a path of a moving point described by a one parameter set of points. An illustration, created using NASA WorldWind, is shown below.</p> <p></p> <p>The <code>trajectory</code> query resource returns data for the defined trajectory. The resource offers a convenience mechanism for querying the API by trajectory, using a Well Known Text (WKT) LINESTRING geometry, or alternatively the specializations LINESTRINGZ, LINESTRINGM, LINESTRINGZM.</p> <p>The path to the resource is shown below:</p> <p><code>/collections/{collectionId}/trajectory</code></p> <p>The paths accepts the following parameters:</p> <ul> <li>coords</li> <li>z</li> <li>parameter-name</li> <li>datetime</li> <li>crs</li> <li>f</li> </ul> <p>An example request is shown below.</p> <p><code>http://example.org/edr/collections/gfs-pressure_at_height/trajectory?coords=LINESTRING(-3.56 53.695,-3.546 53.696,-3.532 53.697)&amp;parameter-name=Height&amp;crs=CRS84&amp;f=CoverageJSON</code></p>"},{"location":"api-deep-dive/environmental-data-retrieval/#summary","title":"Summary","text":"<p>OGC API - Environmental Data Retrieval provides a family of lightweight interfaces to access Environmental Data resources. Each resource addressed by an EDR API maps to a defined query pattern. In this deep dive, we provided an overview of the standard and described each of these query patterns in detail.</p>"},{"location":"api-deep-dive/features/","title":"OGC API - Features","text":"<p>Audience</p> <p>Students that are familiar with web services and APIs, and want to have an overview of OGC API - Features standard</p> <p>Learning Objectives</p> <p>At the completion of the module students will be able to:</p> <ul> <li>Explain what the OGC API - Features standard is</li> <li>Describe what can be done with OGC API - Features implementations</li> <li>Understand the main resources offered by OGC API - Features implementations</li> <li>Understand how to retrieve a description of the capabilities of an OGC API - Features implementation</li> <li>Understand how to issue requests to an implementation of OGC API - Features</li> <li>Be able to find an OGC API - Features endpoint and use it through a client</li> </ul>"},{"location":"api-deep-dive/features/#introduction","title":"Introduction","text":"<p>OGC API - Features is a multi-part standard that offers the capability to create, modify, and query spatial data on the Web and specifies requirements and recommendations for APIs that want to follow a standard way of sharing feature data. OGC API - Features - Part 1: Core describes the mandatory capabilities that every implementing service must support and is restricted to read-access to spatial data. Additional capabilities like support for different CRS, richer queries and creating and modifying data are specified in additional parts.</p> <p>Note</p> <p>This tutorial module is not intended to be a replacement to the actual OGC API - Features - Part 1: Core standard. The tutorial intentionally focuses on a subset of capabilities in order to get the student started with using the standard. Please refer to the OGC API - Features - Part 1: Core standard for additional detail.</p>"},{"location":"api-deep-dive/features/#background","title":"Background","text":"<p>History</p> <p>While in draft form and prior to February 2019, OGC API -   Features - Part 1: Core was referred to as WFS3.0.</p> <p>Versions</p> <p>OGC API - Features - Part 1: Core version 1.0.1, OGC API - Features - Part 2: Coordinate Reference Systems by Reference version 1.0.1 and OGC API - Features - Part 3: Filtering version 1.0.1 are the current   latest versions</p> <p>Test suite</p> <p>Test suites are available for:</p> <ul> <li>OGC API - Features - Part 1</li> <li>OGC API - Features - Part 2</li> </ul> <p>All of the test suites are available from the OGC Validator.</p> <p>Implementations</p> <p>Implementations can be found on the implementations page.</p>"},{"location":"api-deep-dive/features/#usage","title":"Usage","text":"<p>The standard provides a standard interface for requesting vector geospatial data consisting of geographic features and their properties. The benefit of this is that client applications can request source data from multiple implementations of the API, and then render the data for display or process the data further as part of a workflow. The standard enables the data to be accessed consistently with other data. Feature properties encoded using common data types such as text strings, date and time can also be accessed consistently.</p> <ul> <li>OGC API - Features - Part 1: Core specifies discovery and query operations that are implemented using the HTTP GET method. Support for additional methods (in particular POST, PUT, DELETE, PATCH) will be specified in additional parts. Government agencies, private organisations and academic institutes use this standard to publish vector geospatial datasets in a way that makes it easier for receiving organisations to compile new maps or conduct analysis on the supplied data. In Part 1 the default spatial Coordinate Reference System (CRS) is WGS 84 longitude/latitude with or without height.</li> <li> <p>OGC API - Features - Part 2: Coordinate Reference Systems By Reference extends Part 1 to support presenting geometry-valued properties in a response document in additional CRSs. Each supported CRS must be identified by a URI such as: <code>http://www.opengis.net/def/crs/EPSG/0/4326</code>.</p> </li> <li> <p>OGC API - Features - Part 3: Filtering defines query parameters (<code>filter</code>, <code>filter-lang</code>, <code>filter-crs</code>) to specify filter criteria in a request to an API and the <code>Queryables</code> resource that declares the properties of data in a collection that can be used in filter expressions.</p> </li> </ul> <p>In addition to the approved parts above, The OGC API - Features Standards Working Group (SWG) is working on the following drafts:</p> <ul> <li> <p>Draft OGC API - Features - Part 4: Create, Replace, Update and Delete defines the behaviour of an API that allows resource instances to be added, replaced, modified and/or removed for a collection.</p> </li> <li> <p>Draft OGC API - Features - Part 5: Schemas specifies how features can be described by a logical schema and how such schemas are published in an OGC Web API implementation.</p> </li> <li> <p>Draft OGC API - Features - Part 6: Property Selection specifies how the representation of a resource can be reduced to selected properties of the resource using a query parameter.</p> </li> <li> <p>Draft OGC API - Features - Part 7: Geometry Simplification specifies how the representation of geometry can be simplified using a query parameter.</p> </li> <li> <p>Draft OGC API - Features - Part 8: Sorting defines query parameters (sortby) to specify sorting criteria in a request to an API and the Sortables resource that declares the properties of data in a collection that can be used in sort by expressions.</p> </li> <li> <p>Draft OGC API - Features - Part 9: Text Search adds a query parameter to the OGC API Features suite of standards to support text or keyword searches on text fields.</p> </li> <li> <p>Draft OGC API - Features - Part 10: Search/Queries adds support to dynamically fetch features from multiple collections at a time.</p> </li> </ul> <p>Note</p> <p>The rest of this tutorial will focus on the core part of the standard.</p>"},{"location":"api-deep-dive/features/#relation-to-other-ogc-standards","title":"Relation to other OGC Standards","text":"<ul> <li>OGC Web Feature Service Interface Standard (WFS): The WFS standard     is more appropriate when working with client applications that only     support classic OGC Web Services. Note as well that WFS adopts the     Geography Markup Language (GML)     as a default data format. In contrast, OGC API - Features includes     recommendations to support HTML and     GeoJSON as encodings, where practical.     Implementations of OGC API - Features may also optionally support     GML, as well as other vector formats.</li> </ul>"},{"location":"api-deep-dive/features/#overview-of-resources","title":"Overview of Resources","text":"<p>OGC API - Features - Part 1: Core defines the resources listed in the following table.</p> Resource Method Path Purpose Landing page GET / This is the top-level resource, which serves as an entry point. Conformance declaration GET /conformance This resource presents information about the functionality that is implemented by the server. API definition GET /api This resource provides metadata about the API itself. Note use of /api on the server is optional and the API definition may be hosted on completely separate server. Feature collections GET /collections This resource lists the feature collections that are offered through the API. Feature collection GET /collections/{collectionId} This resource describes the feature collection identified in the path. Features GET /collections/{collectionId}/items This resource presents the features that are contained in the collection. Feature GET /collections/{collectionId}/items/{featureId} This resource presents the feature that is identified in the path"},{"location":"api-deep-dive/features/#example","title":"Example","text":"<p>This demonstration server publishes vector geospatial data through an interface that conforms to OGC API - Features.</p> <p>An example request that can be used to retrieve data from the Portuguese Points of Interest feature collection is https://demo.pygeoapi.io/master/collections/ogr_gpkg_poi/items?f=html</p> <p>Note that the response to the request is HTML in this case.</p> <p>Alternatively, the same data can be retrieved in GeoJSON format, through the request https://demo.pygeoapi.io/master/collections/ogr_gpkg_poi/items?f=json</p> <p>A client application can then retrieve the GeoJSON document and display or process it.</p>"},{"location":"api-deep-dive/features/#resources","title":"Resources","text":"<p>This section provides basic information about the types of resources that OGC API - Features offers.</p> <p>Each resource provides links to related resources. This enables a client application to navigate the resources, from the landing page through to the individual features. The server identifies the relationship between a resource and other linked resources through a link relation type, represented by the attribute <code>rel</code>. The link relation types used by implementations of the OGC API - Features - Part 1: Core can be found in Section 5.2 of the standard.</p>"},{"location":"api-deep-dive/features/#landing-page","title":"Landing page","text":"<p>The landing page is the top-level resource that serves as an entry point. A client application needs to know the location of the landing page of the server. From the landing page, the client application can then retrieve links to the Conformance declaration, Collection and API definition paths. An example landing page is at https://demo.ldproxy.net/daraa?f=json</p> <p>The link to the API definition is identified through the <code>service-desc</code> and <code>service-doc</code> link relation types.</p> <p>The link to the Conformance declaration is identified through the <code>conformance</code> link relation type.</p> <p>The link to the Collections is identified through the <code>data</code> link relation type.</p> <p>An extract from the landing page of a demo server is shown below.</p> <pre><code>{\n  \"title\": \"Daraa\",\n  \"description\": \"This is a test dataset used in the Open Portrayal Framework thread in the OGC Testbed-15 as well as the OGC Vector Tiles Pilot Phase 2. The data is based on OpenStreetMap data from the region of Daraa, Syria, converted to the Topographic Data Store schema of NGA.\",\n  \"attribution\": \"US National Geospatial Intelligence Agency (NGA)\",\n  \"links\": [\n    {\n      \"rel\": \"self\",\n      \"type\": \"application/json\",\n      \"title\": \"This document\",\n      \"href\": \"https://demo.ldproxy.net/daraa?f=json\"\n    },\n    {\n      \"rel\": \"service-desc\",\n      \"type\": \"application/vnd.oai.openapi+json;version=3.0\",\n      \"title\": \"Definition of the API in OpenAPI 3.0\",\n      \"href\": \"https://demo.ldproxy.net/daraa/api?f=json\"\n    },\n    {\n      \"rel\": \"conformance\",\n      \"title\": \"OGC API conformance classes implemented by this server\",\n      \"href\": \"https://demo.ldproxy.net/daraa/conformance\"\n    },\n    {\n      \"rel\": \"data\",\n      \"title\": \"Access the data\",\n      \"href\": \"https://demo.ldproxy.net/daraa/collections\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api-deep-dive/features/#conformance-declarations","title":"Conformance declarations","text":"<p>An implementation of OGC API - Features describes the capabilities that it supports by declaring which conformance classes it implements. The Conformance declaration states the conformance classes from standards or community specifications, identified by a URI, that the API conforms to. Clients can then use this information, although they are not required to. Accessing the Conformance declaration using HTTP GET returns the list of URIs of conformance classes implemented by the server. Conformance classes describe the behavior a server should implement in order to meet one or more sets of requirements specified in a standard.</p> <p>Below is an extract from the response to the request https://demo.ldproxy.net/daraa/conformance?f=json</p> <p>Notice that the example shows a link relation type called <code>alternate</code> which identifies a way to retrieve an alternative representation of the information provided by the resource. In this case the <code>alternate</code> link relation is referencing an HTML representation of the conformance declaration.</p> <pre><code>{\n  \"links\": [\n    {\n      \"rel\": \"alternate\",\n      \"type\": \"text/html\",\n      \"title\": \"This document as HTML\",\n      \"href\": \"https://demo.ldproxy.net/daraa/conformance?f=html\"\n    },\n    {\n      \"rel\": \"self\",\n      \"type\": \"application/json\",\n      \"title\": \"This document\",\n      \"href\": \"https://demo.ldproxy.net/daraa/conformance?f=json\"\n    }\n  ]\n\"conformsTo\" : [\"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\", \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\", \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html\", \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\", \"http://www.opengis.net/spec/ogcapi-features-2/1.0/conf/crs\", \"http://www.opengis.net/spec/ogcapi-features-3/0.0/conf/features-filter\", \"http://www.opengis.net/spec/ogcapi-features-3/0.0/conf/filter\", \"http://www.opengis.net/spec/ogcapi-features-3/0.0/conf/queryables\", \"http://www.opengis.net/spec/ogcapi-features-3/0.0/conf/queryables-query-parameters\"]\n}\n</code></pre>"},{"location":"api-deep-dive/features/#api-definition","title":"API Definition","text":"<p>The API definition describes the capabilities of the server. It can be used by developers to understand the API, by software clients to connect to the server, or by development tools to support the implementation of servers and clients. Accessing the API definition using HTTP GET returns a description of the API. </p> <p>There are conformance classes to provide the API definition using Open API. Some servers also return a human-readable representation of the definition in HTML, using tools such as Redoc or Swagger. </p> <p>This is an extract of an API definition, which uses Open API 3:</p> <p><pre><code>{\n  \"openapi\" : \"3.0.3\",\n  \"info\" : {\n    \"title\" : \"Daraa\",\n    \"description\" : \"This is a test dataset used in the Open Portrayal Framework thread in the OGC Testbed-15 as well as the OGC Vector Tiles Pilot Phase 2. The data is based on OpenStreetMap data from the region of Daraa, Syria, converted to the Topographic Data Store schema of NGA.\\n\\n_Note: This API is based on API building blocks (e.g., operations, query parameters, or headers) specified in OGC API Standards or drafts of those standards. For more information about OGC API Standards, see [https://ogcapi.ogc.org](https://ogcapi.ogc.org/). Some building blocks of this API can be preliminary and may change in this API, because they are not yet based on a stable specification. The maturity is stated for each building block._\",\n    \"contact\" : {\n      \"name\" : \"interactive instruments GmbH\",\n      \"email\" : \"mail@interactive-instruments.de\"\n    },\n    \"license\" : {\n      \"name\" : \"The dataset was provided by the US National Geospatial Intelligence Agency (NGA) for development, testing and demonstrations in initiatives of the Open Geospatial Consortium (OGC). For any reuse of the data outside this API, please contact NGA.\"\n    },\n    \"version\" : \"1.0.0\"\n  },\n  \"servers\" : [ {\n    \"url\" : \"https://demo.ldproxy.net/daraa\"\n  } ],\n  \"tags\" : [ ],\n  \"paths\" : {\n    \"/\" : {\n      \"get\" : {\n        \"tags\" : [ \"Capabilities\" ],\n        \"summary\" : \"landing page\",\n        \"description\" : \"The landing page provides links to the API definition (link relations `service-desc` and `service-doc`), the Conformance declaration (path `/conformance`, link relation `conformance`), and other resources in the API.\\n\\n_Maturity: `STABLE`_\",\n        \"externalDocs\" : {\n          \"description\" : \"The specification that describes this operation: OGC API - Features - Part 1: Core\",\n          \"url\" : \"https://docs.ogc.org/is/17-069r4/17-069r4.html\"\n        },\n        \"operationId\" : \"getLandingPage\",\n        \"parameters\" : [ {\n          \"$ref\" : \"#/components/parameters/fCommon\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"The operation was executed successfully.\",\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/LandingPage\"\n                }\n              },\n              \"text/html\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/htmlSchema\"\n                }\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Bad Request\"\n          },\n          \"406\" : {\n            \"description\" : \"Not Acceptable\"\n          },\n          \"500\" : {\n            \"description\" : \"Server Error\"\n          }\n        },\n        \"x-maturity\" : \"STABLE_OGC\"\n      }\n    },\n</code></pre> You can access an HTML representation of the API definition here.</p> <p>Note</p> <p>The use of <code>/api</code> on the server is optional and the API definition may be hosted in a different path or on completely separate server.</p>"},{"location":"api-deep-dive/features/#feature-collections","title":"Feature collections","text":"<p>Data offered through an implementation of OGC API - Features - Part 1: Core is organized into one or more feature collections. The <code>Collections</code> resource provides information about and access to the list of collections.</p> <p>For each collection, there is a link to the detailed description of the collection (represented by the path /collections/{collectionId} and link relation self).</p> <p>For each collection, there is a link to the features in the collection (represented by the path /collections/{collectionId}/items and link relation items) and other information about the collection. The following information is provided by the server to describe each collection:</p> <ul> <li>A local identifier for the collection that is unique for the dataset</li> <li>A list of coordinate reference systems (CRS) in which geometries may     be returned by the server</li> <li>An optional title and description for the collection</li> <li>An optional extent that can be used to provide an indication of the     spatial and temporal extent of the collection</li> <li>An optional indicator about the type of the items in the collection     (the default value, if the indicator is not provided, is     <code>feature</code>).</li> </ul> <p>Below is an extract from the response to the request https://demo.ldproxy.net/daraa/collections?f=json</p> <pre><code>{\n  \"title\": \"Daraa\",\n  \"description\": \"This is a test dataset used in the Open Portrayal Framework thread in the OGC Testbed-15 as well as the OGC Vector Tiles Pilot Phase 2. The data is based on OpenStreetMap data from the region of Daraa, Syria, converted to the Topographic Data Store schema of NGA.\",\n  \"collections\": [\n    {\n      \"title\": \"Aeronautic (Curves)\",\n      \"description\": \"Aeronautical Facilities: Information about an area specifically designed and constructed for landing, accommodating, and launching military and/or civilian aircraft, rockets, missiles and/or spacecraft.&lt;br/&gt;Aeronautical Aids to Navigation: Information about electronic equipment, housings, and utilities that provide positional information for direction or otherwise assisting in the navigation of airborne aircraft.\",\n      \"id\": \"AeronauticCrv\",\n      \"extent\": {\n        \"spatial\": {\n          \"bbox\": [\n            [36.395158, 32.693301, 36.430814, 32.717333]\n          ],\n          \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n        },\n      \"storageCrs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\",\n      \"links\": [\n        {\n          \"rel\": \"items\",\n          \"type\": \"application/geo+json\",\n          \"title\": \"Access the features in the collection 'Aeronautic (Curves)' as GeoJSON\",\n          \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=json\"\n        },\n        {\n          \"rel\": \"self\",\n          \"title\": \"The 'Aeronautic (Curves)' feature collection\",\n          \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv\"\n        }\n      ]\n     }\n    },\n    {\n      \"title\": \"Other (Points)\",\n      \"id\": \"o2s_p\",\n      \"extent\": {\n        \"spatial\": {\n          \"bbox\": [\n            [35.939604, 32.544963, 36.443695, 32.984648]\n          ],\n          \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n        }\n      },\n      \"storageCrs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\",\n      \"links\": [\n        {\n          \"rel\": \"items\",\n          \"type\": \"application/geo+json\",\n          \"title\": \"Access the features in the collection 'Other (Points)' as GeoJSON\",\n          \"href\": \"https://demo.ldproxy.net/daraa/collections/o2s_p/items?f=json\"\n        },\n        {\n          \"rel\": \"self\",\n          \"title\": \"The 'Other (Points)' feature collection\",\n          \"href\": \"https://demo.ldproxy.net/daraa/collections/o2s_p\"\n        }\n      ],\n    }\n  ]\n</code></pre>"},{"location":"api-deep-dive/features/#feature-collection","title":"Feature collection","text":"<p>The Collection resource provides detailed information about the collection identified in a request.</p> <p>Below is an extract from the response to the request https://demo.ldproxy.net/daraa/collections/AeronauticCrv?f=json</p> <pre><code>{\n  \"title\": \"Aeronautic (Curves)\",\n  \"description\": \"Aeronautical Facilities: Information about an area specifically designed and constructed for landing, accommodating, and launching military and/or civilian aircraft, rockets, missiles and/or spacecraft.&lt;br/&gt;Aeronautical Aids to Navigation: Information about electronic equipment, housings, and utilities that provide positional information for direction or otherwise assisting in the navigation of airborne aircraft.\",\n  \"id\": \"AeronauticCrv\",\n  \"extent\": {\n    \"spatial\": {\n      \"bbox\": [\n        [36.395158, 32.693301, 36.430814, 32.717333]\n      ],\n      \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n    },\n    \"temporal\": {\n      \"interval\": [\n        [\n          \"2011-03-16T14:51:12Z\",\n          \"2015-09-11T19:15:35Z\"\n        ]\n      ],\n      \"trs\": \"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\"\n    }\n  },\n  \"itemType\": \"feature\",\n  \"crs\": [\n    \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\",\n    \"http://www.opengis.net/def/crs/EPSG/0/3395\",\n    \"http://www.opengis.net/def/crs/EPSG/0/3857\",\n    \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n  ],\n  \"storageCrs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\",\n  \"links\": [\n    {\n      \"rel\": \"items\",\n      \"type\": \"application/geo+json\",\n      \"title\": \"Access the features in the collection 'Aeronautic (Curves)' as GeoJSON\",\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=json\"\n    }\n    {\n      \"rel\": \"self\",\n      \"type\": \"application/json\",\n      \"title\": \"This document\",\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv?f=json\"\n    }\n  ],\n}\n</code></pre>"},{"location":"api-deep-dive/features/#features","title":"Features","text":"<p>The Features resource returns a document consisting of features contained by the collection identified in a request. The features included in the response are determined by the server based on the query parameters of the request. To support access to larger collections without overloading the client, the API supports paged access with links to the next page, if more features are selected than the page size.</p> <p>Below is an extract from the response to the request https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=json</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"numberReturned\": 10,\n  \"numberMatched\": 20,\n  \"timeStamp\": \"2023-11-29T08:38:10Z\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"id\": 1,\n      \"geometry\": {\n        \"type\": \"MultiLineString\",\n        \"coordinates\": [[[36.4270030, 32.7114540],[36.4251990, 32.7137030]]]\n      },\n      \"properties\": {\n        \"F_CODE\": \"GB075\",\n        \"ZI001_SDV\": \"2011-03-16T14:51:12Z\",\n        \"UFI\": \"2d008c34-4458-4226-b335-cf903d261ce9\",\n        \"ZI005_FNA\": \"No Information\",\n        \"FCSUBTYPE\": 100454\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"id\": 2,\n      \"geometry\": {\n        \"type\": \"MultiLineString\",\n        \"coordinates\": [\n          [[ 36.4009090, 32.7000770 ],\n            [ 36.4031330, 32.7013330 ],\n            [ 36.4208880, 32.7113020 ],\n            [ 36.4231110, 32.7125400 ],\n            [ 36.4251990, 32.7137030 ],\n            [ 36.4252970, 32.7137690 ]\n          ]\n        ]\n      },\n      \"properties\": {\n        \"F_CODE\": \"GB075\",\n        \"ZI001_SDV\": \"2015-09-11T19:15:35Z\",\n        \"UFI\": \"1257bf27-3f91-461d-8a3b-a95af2ea1f5a\",\n        \"ZI005_FNA\": \"No Information\",\n        \"FCSUBTYPE\": 100454\n      }\n    }]\n}\n</code></pre> <p>Note that this document is a valid GeoJSON document.</p> <p>Additional parameters may be used to select only a subset of the features in the collection.</p> <p>A bbox or datetime parameter may be used to select only the subset of the features in the collection that are within the bounding box specified by the bbox parameter or the time interval specified by the datetime parameter. An example request that uses the bbox parameter is https://demo.ldproxy.net/daraa/collections/VegetationSrf/items?f=json&amp;bbox=36.0832432,32.599852,36.1168237,32.6283697</p> <p>Note</p> <p>The effect of the bbox parameter can be easily seen when comparing the HTML response from applying the bbox parameter to the response without any bbox parameter.</p> <p>The limit parameter may be used to control the page size by specifying the maximum number of features that should be returned in the response. An example request that uses the limit parameter is https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=json&amp;limit=2</p> <p>Each page may include information about the number of selected and returned features (<code>numberMatched</code> and <code>numberReturned</code>) as well as links to support paging (link relation <code>next</code>).</p>"},{"location":"api-deep-dive/features/#feature","title":"Feature","text":"<p>The Feature resource is used for retrieving an individual feature, its geometric representation and other properties. In the example below, the feature with an <code>id</code> of 1 is retrieved. The response is retrieved through the request https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items/1?f=json</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"id\": 1,\n  \"geometry\": {\n    \"type\": \"MultiLineString\",\n    \"coordinates\": [\n      [\n        [\n          36.4270030,\n          32.7114540\n        ],\n        [\n          36.4251990,\n          32.7137030\n        ]\n      ]\n    ]\n  },\n  \"properties\": {\n    \"F_CODE\": \"GB075\",\n    \"ZI001_SDV\": \"2011-03-16T14:51:12Z\",\n    \"UFI\": \"2d008c34-4458-4226-b335-cf903d261ce9\",\n    \"ZI005_FNA\": \"No Information\",\n    \"FCSUBTYPE\": 100454\n  },\n  \"links\": [\n    {\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items/1?f=json\",\n      \"rel\": \"self\",\n      \"type\": \"application/geo+json\",\n      \"title\": \"This document\"\n    },\n    {\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items/1?f=jsonfgc\",\n      \"rel\": \"alternate\",\n      \"type\": \"application/vnd.ogc.fg+json;compatibility=geojson\",\n      \"title\": \"This document as JSON-FG (GeoJSON Compatibility Mode)\"\n    },\n    {\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items/1?f=csv\",\n      \"rel\": \"alternate\",\n      \"type\": \"text/csv\",\n      \"title\": \"This document as CSV\"\n    },\n    {\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items/1?f=fgb\",\n      \"rel\": \"alternate\",\n      \"type\": \"application/flatgeobuf\",\n      \"title\": \"This document as FlatGeobuf\"\n    },\n    {\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items/1?f=html\",\n      \"rel\": \"alternate\",\n      \"type\": \"text/html\",\n      \"title\": \"This document as HTML\"\n    },\n    {\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items/1?f=jsonfg\",\n      \"rel\": \"alternate\",\n      \"type\": \"application/vnd.ogc.fg+json\",\n      \"title\": \"This document as JSON-FG\"\n    },\n    {\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv?f=json\",\n      \"rel\": \"collection\",\n      \"type\": \"application/json\",\n      \"title\": \"The collection the feature belongs to\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api-deep-dive/features/#client-usage","title":"Client usage","text":"<p>In this workshop we'll cover different OGC API - Features client tools two JavaScript libraries ( Leaflet and OpenLayers ), one desktop GIS (QGIS) and a C++ library (GDAL).</p>"},{"location":"api-deep-dive/features/#leaflet","title":"Leaflet","text":"<p>Leaflet can read GeoJSON out-of-the-box, from a file or an API. As OGC API - Features can expose data as GeoJSON by using <code>f=json</code> in the request, the response can be read directly in LeafLet using the following code:</p> <pre><code>fetch('https://demo.ldproxy.net/zoomstack/collections/airports/items?limit=100', {\n    headers: {\n      'Accept': 'application/geo+json'\n    }\n  }).then(response =&gt; response.json())\n  .then(data =&gt; {\n  L.geoJSON(data).addTo(map);\n});\n</code></pre> <p>Leaflet also has an external plugin which allows OGC API - Features to be used natively:</p> <pre><code>// Import following in &lt;head&gt; tag\n//   &lt;script src='https://unpkg.com/leaflet-featuregroup-ogcapi@0.1.0/Leaflet.FeatureGroup.OGCAPI.js'&gt;&lt;/script&gt;\n\n\nvar overlay = L.featureGroup.ogcApi(\"https://demo.ldproxy.net/zoomstack/\", {\n    collection: \"airports\",\n    limit: 500,\n    padding: 0.2\n}).addTo(map);\n</code></pre>"},{"location":"api-deep-dive/features/#openlayers","title":"OpenLayers","text":"<p>OpenLayers also understands GeoJSON by default. An OGC API - Features response can be consumed using the following code:</p> <pre><code>fetch('https://demo.ldproxy.net/zoomstack/collections/airports/items?limit=100', {\n    headers: {\n      'Accept': 'application/geo+json'\n    }\n  }).then(response =&gt; response.json())\n  .then(data =&gt; {\n  map.addLayer(new ol.layer.Vector({\n    source: new ol.source.Vector({\n      features: new ol.format.GeoJSON().readFeatures(data, { featureProjection: 'EPSG:3857' }),\n      attributions: 'Contains OS data &amp;copy; Crown copyright and database right 2021.'\n    })\n  }));\n});\n</code></pre>"},{"location":"api-deep-dive/features/#qgis","title":"QGIS","text":"<p>QGIS supports OGC API - Features and WFS using the same vector layer provider.  Open the Data Source Manager and go to the \"WFS / OGC API Features\" tab.</p> <p></p> <p>Provide the connection information.  The URL is the URL of the OGC API landing page resource (in this case https://demo.ldproxy.net/zoomstack). Make sure \"Enable feature paging\" is checked.</p> <p></p> <p>Note that, if a collection has millions of features and the map view covers the extent of the collection, QGIS will try to load all features. To avoid this, you can, for example, restrict the scale range in which the layer should be visible.</p> <p></p>"},{"location":"api-deep-dive/features/#gdal","title":"GDAL","text":"<p>GDAL supports OGC API - Features as core vector format.  The below example demonstrates usage via <code>ogrinfo</code> against an OGC API - Features endpoint:</p> <pre><code>ogrinfo OAPIF:https://demo.ldproxy.net/zoomstack \nINFO: Open of `OAPIF:https://demo.ldproxy.net/zoomstack'\n      using driver `OAPIF' successful.\n1: airports (title: Airports) (Point)\n2: boundaries (title: Boundaries) (Line String)\n3: contours (title: Contours) (Line String)\n4: district_buildings (title: District Buildings) (Polygon)\n5: etl (title: ETL) (Line String)\n6: foreshore (title: Foreshore) (Polygon)\n7: greenspace (title: Greenspace) (Polygon)\n8: land (title: Land) (Polygon)\n9: local_buildings (title: Local Buildings) (Polygon)\n10: names (title: Names) (Point)\n11: national_parks (title: National Parks) (Polygon)\n12: rail (title: Rail) (Line String)\n13: railway_stations (title: RailwayStation) (Point)\n14: roads_local (title: Local Roads) (Line String)\n15: roads_national (title: National Roads) (Line String)\n16: roads_regional (title: Regional Roads) (Line String)\n17: sites (title: Sites) (Multi Polygon)\n18: surfacewater (title: Surface Water) (Polygon)\n19: urban_areas (title: Urban Areas) (Polygon)\n20: waterlines (title: Waterlines) (Line String)\n21: woodland (title: Woodland) (Polygon)\n</code></pre>"},{"location":"api-deep-dive/features/#geojson","title":"GeoJSON","text":"<p>The OGC API - Features GeoJSON Requirements Class specifies a GeoJSON based encoding for based on RFC7946.  Given the ubiquity of GeoJSON, numerous tools exist to validate process and decode/encode GeoJSON, making OGC API - Features GeoJSON easy to include in data processing pipelines.  OGC API - Features includes the JSON Schema for the GeoJSON representation and thus can be used for runtime or offline validation of data payloads.  Applications based on OGC API - Features GeoJSON can extend and constrain the schema accordingly for domain specific workflows.</p>"},{"location":"api-deep-dive/features/#summary","title":"Summary","text":"<p>OGC API - Features provides functionality for working with vector data on the Web.  This deep dive provided an overview of the standard and the various Resources and endpoints that are supported, as well as example of how-to access it using different clients.</p>"},{"location":"api-deep-dive/maps/","title":"OGC API - Maps","text":"<p>Audience</p> <p>Students that are familiar with web services and APIs, and want to have an overview of OGC API - Maps standard</p> <p>Learning Objectives</p> <p>At the completion of the module students will be able to:</p> <ul> <li>Explain what the OGC API - Maps standard is</li> <li>Describe what can be done with OGC API - Maps implementations</li> <li>Understand the main resources offered by OGC API - Maps implementations</li> <li>Understand how to retrieve a description of the capabilities of an OGC API - Maps implementation</li> <li>Understand how to issue requests to an implementation of OGC API - Maps</li> <li>Be able to find an OGC API - Maps endpoint and use it through a client</li> </ul>"},{"location":"api-deep-dive/maps/#introduction","title":"Introduction","text":"<p>OGC API - Maps is a standard that describes an API that presents data as maps by applying a style.  The standard allows a client application to request maps as images, or change parameters such as size and coordinate reference systems at the time of request, making them implementer-friendly and easily understandable by developers without geospatial experience.</p> <p>Note</p> <p>This tutorial module is not intended to be a replacement to the actual OGC API - Maps - Part 1: Core standard. The tutorial intentionally focuses on a subset of capabilities in order to get the student started with using the standard. Please refer to the OGC API - Maps - Part 1: Core standard for additional detail.</p>"},{"location":"api-deep-dive/maps/#background","title":"Background","text":"<p>History</p> <p>OGC API - Maps standard work was started in 2019.  It has been developed in relation to OGC API - Tiles in   support of providing both dynamic maps and map tiles.</p> <p>Versions</p> <p>OGC API - Maps - Part 1: Core version 1.0.0 is the current latest version</p> <p>Test suite</p> <p>There are no test suites currently implemented; they will be made available once the specification is   approved, and an executable test suite (ETS) is made availabe as per of OGC CITE.</p> <p>Implementations</p> <p>Implementations can be found on the implementations page.</p>"},{"location":"api-deep-dive/maps/#usage","title":"Usage","text":""},{"location":"api-deep-dive/maps/#relation-to-other-standards","title":"Relation to other standards","text":"<p>OGC Web Map Service Interface Standard (WMS): The WMS standard is a long standing and arguably the most well known and utilized OGC standard.</p> <p>more appropriate when working with client applications that only support classic OGC Web Services. Note as well that WFS adopts the Geography Markup Language (GML) as a default data format. In contrast, OGC API - Features includes recommendations to support HTML and GeoJSON as encodings, where practical. Implementations of OGC API - Features may also optionally support GML, as well as other vector formats.</p>"},{"location":"api-deep-dive/maps/#overview-of-resources","title":"Overview of Resources","text":"<p>OGC API - Maps - Part 1: Core defines the resources listed in the following table.</p> <p>Note</p> <p>This deep dive focuses on the \"Collection Maps\" Requirement Class of OGC API - Maps.  \"Dataset Maps\" is not included at this time.</p> Resource Method Path Purpose Landing page GET / This is the top-level resource, which serves as an entry point. Conformance declaration GET /conformance This resource presents information about the functionality that is implemented by the server. API definition GET /api This resource provides metadata about the API itself. Note use of /api on the server is optional and the API definition may be hosted on completely separate server. Collections GET /collections This resource lists the collections that are offered through the API. Collection GET /collections/{collectionId} This resource describes the collection identified in the path. Collection maps in the default style GET /collections/{collectionId}/map This resource presents the map associated with the collection using the default style. Collection maps GET /collections/{collectionId}/styles/{styleId}/map This resource presents the map associated with the collection using an applicable style."},{"location":"api-deep-dive/maps/#example","title":"Example","text":"<p>This demonstration server publishes geospatial data through an interface that conforms to OGC API - Maps.</p> <p>An example request that can be used to retrieve data from the MapServer WMS demo collection is https://demo.pygeoapi.io/master/collections/mapserver_world_map/map?f=png</p> <p>Note that given the scope and purpose of OGC API - Maps, the response to the request is a raw PNG image and not raw data.</p>"},{"location":"api-deep-dive/maps/#resources","title":"Resources","text":""},{"location":"api-deep-dive/maps/#landing-page","title":"Landing page","text":"<p>Given OGC API - Maps uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/maps/#conformance-declarations","title":"Conformance declarations","text":"<p>Given OGC API - Maps uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/maps/#api-definition","title":"API Definition","text":"<p>Given OGC API - Maps uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/maps/#collections","title":"Collections","text":"<p>Given OGC API - Maps uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p> <p>OGC API - Maps collection descriptions provide a number of optional properties, including:</p> <ul> <li>data type: a description of the underlying data supplied by the map (vector, coverage, map)</li> <li>min and max scale denominator: minimum and maximum scale denominator for usage of the collection as a map</li> </ul> <p>Below is an extract from the response to the request https://demo.pygeoapi.io/master/collections?f=json.</p> <pre><code>{\n  \"id\": \"mapserver_world_map\",\n  \"title\": \"MapServer demo WMS world map\",\n  \"description\": \"MapServer demo WMS world map\",\n  \"keywords\": [\n    \"MapServer\",\n    \"world map\"\n  ],\n  \"links\": [\n    {\n      \"type\": \"text/html\",\n      \"rel\": \"canonical\",\n      \"title\": \"information\",\n      \"href\": \"https://demo.mapserver.org\",\n      \"hreflang\": \"en-US\"\n    },\n    {\n      \"type\": \"application/json\",\n      \"rel\": \"root\",\n      \"title\": \"The landing page of this server as JSON\",\n      \"href\": \"https://demo.pygeoapi.io/master?f=json\"\n    },\n    {\n      \"type\": \"text/html\",\n      \"rel\": \"root\",\n      \"title\": \"The landing page of this server as HTML\",\n      \"href\": \"https://demo.pygeoapi.io/master?f=html\"\n    },\n    {\n      \"type\": \"application/json\",\n      \"rel\": \"self\",\n      \"title\": \"This document as JSON\",\n      \"href\": \"https://demo.pygeoapi.io/master/collections/mapserver_world_map?f=json\"\n    },\n    {\n      \"type\": \"application/ld+json\",\n      \"rel\": \"alternate\",\n      \"title\": \"This document as RDF (JSON-LD)\",\n      \"href\": \"https://demo.pygeoapi.io/master/collections/mapserver_world_map?f=jsonld\"\n    },\n    {\n      \"type\": \"text/html\",\n      \"rel\": \"alternate\",\n      \"title\": \"This document as HTML\",\n      \"href\": \"https://demo.pygeoapi.io/master/collections/mapserver_world_map?f=html\"\n    },\n    {\n      \"type\": \"image/png\",\n      \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/map\",\n      \"title\": \"Map as png\",\n      \"href\": \"https://demo.pygeoapi.io/master/collections/mapserver_world_map/map?f=png\"\n    }\n  ],\n  \"extent\": {\n    \"spatial\": {\n      \"bbox\": [\n        [\n          -180,\n          -90,\n          180,\n          90\n        ]\n      ],\n      \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n    }\n  }\n}\n</code></pre> <p>Note</p> <p>An HTML representation can be viewed if changing <code>f=html</code> or not specifying the <code>f</code> parameter when working throgh a web browser.</p> <p>In the <code>links</code> array, notice the link with the link relation (<code>rel</code>) of <code>http://www.opengis.net/def/rel/ogc/1.0/map</code>.  This link relation informs the client that the link is an OGC API - Maps interface that provides either a default map (<code>href</code>) or a map with various query parameters applied.</p>"},{"location":"api-deep-dive/maps/#collection","title":"Collection","text":"<p>Given OGC API - Maps uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation, as well as the Collections description.</p> <p>To inspect the specific collection, run the request https://demo.pygeoapi.io/master/collections/mapserver_world_map?f=json.</p>"},{"location":"api-deep-dive/maps/#collection-maps-in-the-default-style","title":"Collection maps in the default style","text":"<p>Let generate a map from the collection using the link in the above extract:</p> <p>https://demo.pygeoapi.io/master/collections/mapserver_world_map/map</p> <p></p> <p>The request above asks the OGC API - Maps server to generate a default map as determined by the server.  In this case, the default is a map of the world with a pixel width of 500 and height of 300.</p> <p>Additional parameters can be added to the map URL with specific width, height and area of interest.</p> <p>To clip the map to a desired area of interest (for example, India), use the bbox parameter:</p> <p>https://demo.pygeoapi.io/master/collections/mapserver_world_map/map?f=png&amp;bbox=69,7,99,37</p> <p>To adjust the map's dimensions, use the width and height parameters:</p> <p>https://demo.pygeoapi.io/master/collections/mapserver_world_map/map?f=png&amp;bbox=69,7,99,37&amp;width=800&amp;height=600</p> <p></p>"},{"location":"api-deep-dive/maps/#collection-maps","title":"Collection maps","text":"<p>To demonstrate an OGC API - Maps implementation, this demonstration server provides a list of styles for a given dataset at https://test.cubewerx.com/cubewerx/cubeserv/demo/ogcapi/Foundation/collections/gtopo30/styles?f=json.</p> <p>Each style within the collection can then be requested as a map as follows (using the <code>colorShaded</code> and <code>desaturated</code> styles):</p> <p>https://test.cubewerx.com/cubewerx/cubeserv/demo/ogcapi/Foundation/collections/gtopo30/styles/colorShaded/map</p> <p></p> <p>https://test.cubewerx.com/cubewerx/cubeserv/demo/ogcapi/Foundation/collections/gtopo30/styles/desaturated/map</p> <p></p>"},{"location":"api-deep-dive/maps/#summary","title":"Summary","text":"<p>The OGC API - Maps standard describes an API that presents data as maps by applying a style.  This deep dive provided an overview of the standard and the various Resources and endpoints that are supported.</p>"},{"location":"api-deep-dive/primer/","title":"PrimerReady to deep dive into the OGC APIs?  Let's go!","text":"<p>The deep dives will focus on numerous OGC API standards, starting from the foundational OGC API - Common, followed by API implementations for various geospatial data types and workflows.  Discovery, access, visualization and processing are core workflows in the geospatial domain.  The deep dives are designed for you to \"dive deep\" into to better understand their purpose and applicability to your requirements/interests.</p> <p>Each API deep dive will consist of the following components:</p> <ul> <li>Introduction: an overview of the API, its core functionality, and how it fits into the greater OGC API ecosystem</li> <li>Resources: a detailed description of each URL / endpoint supported by the API</li> </ul> <p>Note</p> <p>\"Resource\" can be an overloaded term. The \"Resources\" section in each deep dive describe HTTP methods, URL paths/endpoints and explanations of functionality.</p>"},{"location":"api-deep-dive/processes/","title":"OGC API - Processes","text":"<p>Audience</p> <p>Students that are familiar with web services and APIs, and want to have an overview of OGC API - Processes standard</p> <p>Learning Objectives</p> <p>At the completion of the module students will be able to:</p> <ul> <li>Explain what the OGC API - Processes standard is</li> <li>Describe what can be done with OGC API - Processes implementations</li> <li>Understand the main resources offered by OGC API - Processes implementations</li> <li>Understand how to retrieve a description of the capabilities of an OGC API - Processes implementation</li> <li>Understand how to issue requests to an implementation of OGC API - Processes</li> <li>Be able to find an OGC API - Processes endpoint and use it through a client</li> </ul>"},{"location":"api-deep-dive/processes/#introduction","title":"Introduction","text":"<p>OGC API\u2009--\u2009Processes is a\u2009standard that supports the wrapping of computational tasks into executable processes that can be offered by a server through a Web API and be invoked by a client application. The standard specifies a processing interface to communicate over a RESTful protocol using JavaScript Object Notation (JSON) encodings. The standard leverages concepts from the OGC Web Processing Service (WPS) 2.0 Interface Standard but does not require implementation of a WPS. The Core part of the standard is called OGC API - Processes - Part 1: Core. The Core part of the standard supports the wrapping of computational tasks into executable processes that can be offered by a server through a Web API and be invoked by a client application either synchronously or asynchronously. Examples of computational processes that can be supported by implementations of this specification include raster algebra, geometry buffering, constructive area geometry, routing, imagery analysis and several others.</p> <p>Note</p> <p>This tutorial module is not intended to be a replacement to the actual OGC API - Processes - Part 1: Core standard. The tutorial intentionally focuses on a subset of capabilities in order to get the student started with using the standard. Please refer to the OGC API - Processes - Part 1: Core standard for additional detail.</p>"},{"location":"api-deep-dive/processes/#background","title":"Background","text":"<p>History</p> <p>Several of the concepts specified in OGC API - Processes originated in work specifying a RESTful interface for WPS 2.0. From February 2019 onwards, all work relating to a RESTful interface for the WPS2.0 was changed to focus on OGC API - Processes.</p> <p>Versions</p> <p>OGC API - Processes - Part 1: Core version 1.0.0 is the current latest version</p> <p>Test suite</p> <p>Test suites are available for:</p> <ul> <li>OGC API - Processes - Part 1</li> </ul> <p>All of the test suites are available from the OGC Validator.</p> <p>Implementations</p> <p>Implementations can be found on the implementations page.</p>"},{"location":"api-deep-dive/processes/#usage","title":"Usage","text":"<p>OGC API - Processes - Part 1: Core supports the wrapping of computational tasks into executable processes that can be offered by a server through a Web API and be invoked by a client application. Government agencies, private organisations and academic institutes use the OGC API - Processes standard to provide implementations of geospatial algorithms that process data. The benefit of this is that the processing of geospatial data, including data from sensors, can be distributed thereby allowing for more capacity to process larger amounts of data.</p> <p>In addition to the approved part above, The OGC API - Processes Standards Working Group (SWG) is working on the following drafts:</p> <ul> <li> <p>Draft OGC API - Processes - Part 2: Deploy, Replace, Undeploy extends the core capabilities specified in Part 1 with the ability to dynamically add, modify and/or delete individual processes using an implementation (endpoint) of the OGC API\u2009-\u2009Processes Standard.</p> </li> <li> <p>Draft OGC API - Processes - Part 3: Workflows and Chaining extends the core capabilities specified in Part 1 with the ability to chain nested processes, refer to both local and external processes and collections of data accessible via OGC API standards as inputs to a process, and trigger execution of processes through OGC API data delivery specifications such as OGC API\u2009\u2014\u2009Tiles, DGGS, Coverages, Features, EDR and Maps.</p> </li> </ul>"},{"location":"api-deep-dive/processes/#relation-to-other-ogc-standards","title":"Relation to other OGC Standards","text":"<ul> <li>OGC Web Processing Service Interface Standard (WPS): The WPS     Standard provides a standard interface that simplifies the task of     making simple or complex computational geospatial processing     services accessible via web services. The OGC API\u2009---\u2009Processes     Standard is a newer and more modern way of programming and     interacting with resources over the web while allowing better     integration into existing software packages. The OGC     API\u2009---\u2009Processes Standard addresses all of the use cases that were     addressed by the WPS Standard, while also leveraging the OpenAPI     specification and a resource-oriented approach.</li> </ul>"},{"location":"api-deep-dive/processes/#overview-of-resources","title":"Overview of Resources","text":"<p>OGC API - Processes - Part 1: Core defines the resources listed in the following table.</p> Resource Method Path Purpose Landing page GET / This is the top-level resource, which serves as an entry point. Conformance declaration GET /conformance This resource presents information about the functionality that is implemented by the server. API definition GET /api This resource provides metadata about the API itself. Note use of /api on the server is optional and the API definition may be hosted on completely separate server. Process list GET /processes  Process identifiers, links to process descriptions. Process description  GET /processes/{processID} Retrieves a process description. Process execution POST /processes/{processID}/execution Creates and executes a job. Job status info GET /jobs/{jobID} Retrieves information about the status of a job. Job results GET /jobs/{jobID}/results Retrieves the resul(s) of a job. Job list GET /jobs Retrieves the list of jobs. Job deletion DELETE /jobs/{jobID}  Cancels and deletes a job."},{"location":"api-deep-dive/processes/#example","title":"Example","text":"<p>This demonstration server offers and executes various processes through an interface that conforms to OGC API - Processes.</p> <p>An example request that can be used to browse all the available processes can be found at https://demo.pygeoapi.io/master/processes.</p> <p>Note that the response to the request is HTML in this case.</p> <p>Alternatively, the same data can be retrieved in GeoJSON format, through the request https://demo.pygeoapi.io/master/processes?f=json</p>"},{"location":"api-deep-dive/processes/#resources","title":"Resources","text":""},{"location":"api-deep-dive/processes/#landing-page","title":"Landing page","text":"<p>Given OGC API - Processes uses OGC API - Common and OGC API - Features as building blocks, please see the OGC API - Features deep dive for a detailed explanation.</p>"},{"location":"api-deep-dive/processes/#conformance-declarations","title":"Conformance declarations","text":"<p>Given OGC API - Processes uses OGC API - Common and OGC API - Features as building blocks, please see the OGC API - Features deep dive for a detailed explanation.</p>"},{"location":"api-deep-dive/processes/#api-definition","title":"API Definition","text":"<p>Given OGC API - Processes OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/processes/#process-list","title":"Process list","text":"<p>Processes offered through an implementation of OGC API - Processes are organized into one or more processes.  The <code>/processes</code> endpoint provides information about and access to the list of processes.</p> <p>For each process, there is a link to the detailed description of the  process (represented by the path /processes/{processId} and  link relation self).  In addition, there are links for executing the process as well as the list of jobs as a results of executing the process.</p> <p>Process information also includes whether the process can be run in synchronous and / or asynchronous mode (job control options).  Asynchronous mode is valuable for executing long running jobs without blocking the HTTP request/response workflow. This also means the client can check back for the status of the job as well as the result once it is completed.</p> <p>Finally, there are definitions for the input structure required to run the process (expressed as JSON Schema), as well as the output structure a client should expect when receiving a response from the process execution.</p> <p>Below is an extract from the response to the request https://demo.pygeoapi.io/master/processes?f=json</p> <pre><code>{\n    \"version\": \"0.2.0\",\n    \"id\": \"hello-world\",\n    \"title\": \"Hello World\",\n    \"description\": \"An example process that takes a name as input, and echoes it back as output. Intended to demonstrate a simple process with a single literal input.\",\n    \"jobControlOptions\":[\n        \"sync-execute\",\n        \"async-execute\"\n    ],\n    \"keywords\":[\n        \"hello world\",\n        \"example\",\n        \"echo\"\n    ],\n    \"links\":[\n        {\n            \"type\": \"text/html\",\n            \"rel\": \"about\",\n            \"title\": \"information\",\n            \"href\": \"https://example.org/process\",\n            \"hreflang\": \"en-US\"\n        },\n        {\n            \"type\": \"application/json\",\n            \"rel\": \"self\",\n            \"href\": \"https://demo.pygeoapi.io/master/processes/hello-world?f=json\",\n            \"title\": \"Process description as JSON\",\n            \"hreflang\": \"en-US\"\n        },\n        {\n            \"type\": \"text/html\",\n            \"rel\": \"alternate\",\n            \"href\": \"https://demo.pygeoapi.io/master/processes/hello-world?f=html\",\n            \"title\": \"Process description as HTML\",\n            \"hreflang\": \"en-US\"\n        },\n        {\n            \"type\": \"text/html\",\n            \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/job-list\",\n            \"href\": \"https://demo.pygeoapi.io/master/jobs?f=html\",\n            \"title\": \"jobs for this process as HTML\",\n            \"hreflang\": \"en-US\"\n        },\n        {\n            \"type\": \"application/json\",\n            \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/job-list\",\n            \"href\": \"https://demo.pygeoapi.io/master/jobs?f=json\",\n            \"title\": \"jobs for this process as JSON\",\n            \"hreflang\": \"en-US\"\n        },\n        {\n            \"type\": \"application/json\",\n            \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/execute\",\n            \"href\": \"https://demo.pygeoapi.io/master/processes/hello-world/execution?f=json\",\n            \"title\": \"Execution for this process as JSON\",\n            \"hreflang\": \"en-US\"\n        }\n    ],\n    \"inputs\":{\n        \"name\":{\n            \"title\": \"Name\",\n            \"description\": \"The name of the person or entity that you wish tobe echoed back as an output\",\n            \"schema\":{\n                \"type\": \"string\"\n            },\n            \"minOccurs\":1,\n            \"maxOccurs\":1,\n            \"metadata\":null,\n            \"keywords\":[\n                \"full name\",\n                \"personal\"\n            ]\n        },\n        \"message\":{\n            \"title\": \"Message\",\n            \"description\": \"An optional message to echo as well\",\n            \"schema\":{\n                \"type\": \"string\"\n            },\n            \"minOccurs\":0,\n            \"maxOccurs\":1,\n            \"metadata\":null,\n            \"keywords\":[\n                \"message\"\n            ]\n        }\n    },\n    \"outputs\":{\n        \"echo\":{\n            \"title\": \"Hello, world\",\n            \"description\": \"A \\\"hello world\\\" echo with the name and (optional) message submitted for processing\",\n            \"schema\":{\n                \"type\": \"object\",\n                \"contentMediaType\": \"application/json\"\n            }\n        }\n    },\n    \"example\":{\n        \"inputs\":{\n            \"name\": \"World\",\n            \"message\": \"An optional message.\"\n        }\n    },\n    \"outputTransmission\":[\n        \"value\"\n    ]\n}\n</code></pre>"},{"location":"api-deep-dive/processes/#process-description","title":"Process description","text":"<p>The previous example demonstrated process information for all processes offered by an OGC API - Processes server.  To access process information for a single process, run the below request against the demo server:</p> <p>https://demo.pygeoapi.io/master/processes/hello-world?f=json</p> <p>Note</p> <p>Single process information requires the process identifier as part of the URL</p>"},{"location":"api-deep-dive/processes/#process-execution","title":"Process execution","text":"<p>Now that we have the appropriate process information, we can execute the process.  Process execution requires that requests are run using HTTP POST, with a payload as specified/required by the server (JSON).</p> <p>Note</p> <p>Web browsers cannot easily make HTTP POST requests, so we use the curl command. You are welcome to use any tool that is able to execute HTTP POST requests per below.</p> <pre><code>curl -X 'POST' \\\n  'https://demo.pygeoapi.io/master/processes/hello-world/execution' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"inputs\": {\n    \"message\": \"Great to see you here\",\n    \"name\": \"OGC API workshop participant\"\n  }\n}'\n</code></pre> <p>The server will respond with an immediate response (synchronous mode by default) as per below:</p> <pre><code>{\n    \"id\": \"echo\",\n    \"value\": \"Hello OGC API workshop participant! Great to see you here\"\n}\n</code></pre> <p>To execute the same process in asynchronous mode, we need to add the Prefer: respond-async HTTP header.  As well, the response to an ascynchronous process execution is always empty, where the HTTP Location header contains a URL to the resulting job information.</p> <p>Note</p> <p>We add the <code>-v</code> option to the curl command below to be able to inspect the response headers</p> <pre><code>curl -v -X 'POST' \\\n  'https://demo.pygeoapi.io/master/processes/hello-world/execution' \\\n  -H 'Prefer: respond-async' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"inputs\": {\n    \"message\": \"Great to see you here\",\n    \"name\": \"OGC API workshop participant\"\n  }\n}'\n</code></pre> <p>An extract of the response shows the Location (location) HTTP header:</p> <pre><code>&lt; HTTP/2 201 \n&lt; access-control-allow-origin: *\n&lt; content-language: en-US\n&lt; content-type: application/json\n&lt; date: Mon, 04 Dec 2023 16:33:06 GMT\n&lt; location: https://demo.pygeoapi.io/master/jobs/cdbc641c-92c2-11ee-9c88-0242ac120003\n&lt; preference-applied: respond-async\n&lt; server: gunicorn\n&lt; x-powered-by: pygeoapi 0.16.dev0\n&lt; content-length: 4\n</code></pre> <p>Note</p> <p>The URL of the <code>location</code> HTTP header will always be unique</p>"},{"location":"api-deep-dive/processes/#job-status-info","title":"Job status info","text":"<p>Using the URL from the <code>location</code> HTTP header above, we can inspect the status of the job:</p> <p>https://demo.pygeoapi.io/master/jobs/cdbc641c-92c2-11ee-9c88-0242ac120003?f=json</p> <pre><code>{\n    \"processID\": \"hello-world\",\n    \"jobID\": \"cdbc641c-92c2-11ee-9c88-0242ac120003\",\n    \"status\": \"successful\",\n    \"message\": \"Job complete\",\n    \"progress\":100,\n    \"parameters\":null,\n    \"job_start_datetime\": \"2023-12-04T16:33:06.806485Z\",\n    \"job_end_datetime\": \"2023-12-04T16:33:06.812615Z\",\n    \"links\":[\n        {\n            \"href\": \"https://demo.pygeoapi.io/master/jobs/cdbc641c-92c2-11ee-9c88-0242ac120003/results?f=html\",\n            \"rel\": \"about\",\n            \"type\": \"text/html\",\n            \"title\": \"results of job cdbc641c-92c2-11ee-9c88-0242ac120003 as HTML\"\n        },\n        {\n            \"href\": \"https://demo.pygeoapi.io/master/jobs/cdbc641c-92c2-11ee-9c88-0242ac120003/results?f=json\",\n            \"rel\": \"about\",\n            \"type\": \"application/json\",\n            \"title\": \"results of job cdbc641c-92c2-11ee-9c88-0242ac120003 as JSON\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api-deep-dive/processes/#job-results","title":"Job results","text":"<p>Here we see that the job is fully executed and complete, but does not contain the actual results.  To inspect the actual results, we use the link objects which provide the results accordingly:</p> <p>https://demo.pygeoapi.io/master/jobs/cdbc641c-92c2-11ee-9c88-0242ac120003/results?f=json</p> <p>Note</p> <p>We see that the the results of the synchronous and asynchronous request/responses are identical, and that only the execution control is different.</p>"},{"location":"api-deep-dive/processes/#job-list","title":"Job list","text":"<p>In the same manner that an OGC API - Proceses server provides access to process information for all its processes, the server provides the same for all of its jobs (from any process) using the following URL:</p> <p>https://demo.pygeoapi.io/master/jobs?f=json</p>"},{"location":"api-deep-dive/processes/#job-deletion","title":"Job deletion","text":"<p>If we wish to delete a given job, we can execute an HTTP DELETE request agains the the job ID.</p> <p>Note</p> <p>Web browsers cannot easily make HTTP DELETE requests, so we use the curl command. You are welcome to use any tool that is able to execute HTTP DELETE requests per below.</p> <pre><code>curl -X 'DELETE' https://demo.pygeoapi.io/master/jobs/cdbc641c-92c2-11ee-9c88-0242ac120003\n</code></pre> <p>Note</p> <p>Try running an HTTP GET on the job that was just deleted and verify that it no longer exists (HTTP 404).</p> <p>Note</p> <p>Some servers may implement access control to prevent erroneous or unwanted deletion of a job or other resource.</p>"},{"location":"api-deep-dive/processes/#summary","title":"Summary","text":"<p>The OGC API - Processes standard enables the execution of computing processes and the retrieval of metadata describing the purpose and functionality of the processes. This deep dive provided an introduction to the standard and an overview of its various endpoints, that enable monitoring, creating, updating and deleting those processes on a server.</p>"},{"location":"api-deep-dive/records/","title":"OGC API - Records","text":"<p>Audience</p> <p>Students that are familiar with web services and APIs, and want to have an overview of OGC API - Records standard</p> <p>Learning Objectives</p> <p>At the completion of the module students will be able to:</p> <ul> <li>Explain what the OGC API - Records standard is</li> <li>Describe what can be done with OGC API - Records implementations</li> <li>Understand the main resources offered by OGC API - Records implementations</li> <li>Understand how to retrieve a description of the capabilities of an   OGC API - Records implementation</li> <li>Understand how to issue requests to an implementation of OGC API - Records</li> <li>Be able to find an OGC API - Records endpoint and use it through a client</li> </ul>"},{"location":"api-deep-dive/records/#introduction","title":"Introduction","text":"<p>OGC API - Records is a multi-part draft specification that offers the capability to create, modify, and query metadata on the Web. The draft specification enables the discovery of geospatial resources by standardizing the way collections of descriptive information about the resources (metadata) are exposed.  The draft specification also enables the discovery and sharing of related resources that may be referenced from geospatial resources or their metadata by standardizing the way all kinds of records are exposed and managed.  Part 1 covers read-only access to records and simple query capabilities.  Additional capabilities that address specific needs will be specified in additional parts. Capabilities for richer queries or to create, update or delete records will be specified in additional parts.</p> <p>Note</p> <p>OGC API - Records leverages OGC API - Features as a baseline with similar URL endpoints and request/response workflow, for the Searchable Catalog and Local.</p>"},{"location":"api-deep-dive/records/#background","title":"Background","text":"<p>History</p> <p>OGC API - Records standard work was started in 2018 and originally referred to as   OGC CAT4.0.  It has since followed the development of OGC API - Features as a baseline.</p> <p>Versions</p> <p>OGC API - Records - Part 1: Core has been submitted to the OGC Architecture Board (OAB)   and has completed public review stage. It is expected to be finalized in Q4 2024.</p> <p>Test suite</p> <p>There are no test suites currently implemented; they will be made available once   the specification is approved, and an executable test suite (ETS) is made availabe   as per of OGC CITE.</p> <p>Implementations</p> <p>Implementations can be found on the implementations page.</p>"},{"location":"api-deep-dive/records/#usage","title":"Usage","text":"<p>OGC API - Records supports 3 main deployment patterns:</p> <ul> <li>Crawlable catalog: browse and navigation of a set of metadata records via links</li> <li>Searchable catalog: API capability to query and filter a collection of metadata records based on serch criteria (bbox, datetime, q, etc.)</li> <li>Local resources catalog: searchable catalog functionality applied at the collection level of an API</li> </ul> <p>OGC API - Records also supports a core queryable model.  That is, a set of common queryable properties that can be used against any OGC API - Records server regardless of the metadata format/standard and/or the design of the underlying metadata repository.</p> <p>Note</p> <p>For the purposes of this deep dive, we will focus on the Searchable catalog deployment pattern.</p>"},{"location":"api-deep-dive/records/#relation-to-other-standards","title":"Relation to other standards","text":"<p>OGC Catalogue Service for the Web (CSW): The CSW standard is more appropriate when working with client applications that only support classic OGC Web Services. Note as well that CSW adopts a core metadata model based on Dublin Core by default. In contrast, OGC API - Records includes recommendations to support HTML and GeoJSON as encodings, where practical. Implementations of OGC API - Records may also optionally support XML metadata formats, such as ISO 19115/19139.</p>"},{"location":"api-deep-dive/records/#overview-of-resources","title":"Overview of Resources","text":"<p>OGC API - Records - Part 1: Core defines the resources listed in the following table.</p> Resource Method Path Purpose Landing page GET / This is the top-level resource, which serves as an entry point. Conformance declaration GET /conformance This resource presents information about the functionality that is implemented by the server. API definition GET /api This resource provides metadata about the API itself. Note use of /api on the server is optional and the API definition may be hosted on completely separate server. Record collections GET /collections This resource lists the record collections that are offered through the API. Record collection GET /collections/{collectionId} This resource describes the record collection identified in the path. Records access GET /collections/{collectionId}/items This resource presents the records that are contained in the collection. Record core GET /collections/{collectionId}/items/{recordId} This resource presents the record that is identified in the path <p>As mentioned earlier, OGC API - Records heavily leverages OGC API - Features as a baseline building block.  While OGC API - Records allows for any metadata model, a key difference and value add is the ability to describe a core record model and queryables.  This allows for interoperability and integration across catalogs to be able to describe geospatial resources in a consistent manner.</p> <p>For example, a metadata repository can be modelled after the ISO 19115 standard, and be exposed via OGC API - Records by means of \"mapping\" the ISO elements to the core record model and queryables.</p> <p>The core record is the atomic unit of information in a catalog.  A full description of the core properties of a record can be found in https://docs.ogc.org/DRAFTS/20-004.html#core-properties.  The core record is a GeoJSON compatible representation with fixed elements in the <code>properties</code> object/block.</p>"},{"location":"api-deep-dive/records/#example","title":"Example","text":"<p>This demonstration server publishes metadata geospatial data through an interface that conforms to OGC API - Records.</p> <p>An example request that can be used to retrieve data from the Sample metadata records from Dutch Nationaal georegister record collection is https://demo.pygeoapi.io/master/collections/dutch-metadata?f=html</p> <p>Note that the response to the request is HTML in this case.</p> <p>Alternatively, the same data can be retrieved in GeoJSON format, through the request https://demo.pygeoapi.io/master/collections/dutch-metadata?f=json</p> <p>A client application can then retrieve the GeoJSON document and display or process it.</p>"},{"location":"api-deep-dive/records/#resources","title":"Resources","text":""},{"location":"api-deep-dive/records/#landing-page","title":"Landing page","text":"<p>Given OGC API - Records uses OGC API - Common and OGC API - Features as building blocks, please see the OGC API - Features deep dive for a detailed explanation.</p>"},{"location":"api-deep-dive/records/#conformance-declarations","title":"Conformance declarations","text":"<p>Given OGC API - Records uses OGC API - Common and OGC API - Features as building blocks, please see the OGC API - Features deep dive for a detailed explanation.</p>"},{"location":"api-deep-dive/records/#api-definition","title":"API Definition","text":"<p>Given OGC API - Records uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/records/#records-collections","title":"Records collections","text":"<p>Given OGC API - Records uses OGC API - Common and OGC API - Features as building blocks, please see the OGC API - Features deep dive for a detailed initial explanation.</p> <p>OGC API - Records collection descriptions provide the following additional properties:</p> <ul> <li>A required title for the collection</li> <li>A required type for the collection</li> <li>A required indicator about the type of the items in the collection (<code>record</code>)</li> </ul> <p>Below is an extract from the response to the request https://demo.pygeoapi.io/master/collections?f=json illustrating a single record collection:</p> <pre><code>{\n    \"id\": \"dutch-metadata\",\n    \"type\": \"Catalog\",\n    \"itemType\": \"record\",\n    \"title\": \"Sample metadata records from Dutch Nationaal georegister\",\n    \"description\": \"Sample metadata records from Dutch Nationaal georegister\",\n    \"keywords\":[\n        \"netherlands\",\n        \"open data\",\n        \"georegister\"\n    ],\n    \"links\":[\n        {\n            \"type\": \"application/json\",\n            \"rel\": \"self\",\n            \"title\": \"This document as JSON\",\n            \"href\": \"https://demo.pygeoapi.io/master/collections/dutch-metadata?f=json\"\n        },\n        {\n            \"type\": \"application/geo+json\",\n            \"rel\": \"items\",\n            \"title\": \"items as GeoJSON\",\n            \"href\": \"https://demo.pygeoapi.io/master/collections/dutch-metadata/items?f=json\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api-deep-dive/records/#records-collection","title":"Records collection","text":"<p>Given OGC API - Records uses OGC API - Common and OGC API - Features as building blocks, please see the OGC API - Features deep dive for a detailed initial explanation, as well as the Records collections description..</p>"},{"location":"api-deep-dive/records/#records-access","title":"Records access","text":"<p>Given OGC API - Records uses OGC API - Common and OGC API - Features as building blocks, please see the OGC API - Features deep dive for a detailed explanation.</p> <p>Below is an extract from the response to the request https://demo.pygeoapi.io/master/collections/dutch-metadata/items?f=json</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"numberMatched\": 308,\n  \"numberReturned\": 10,\n  \"features\": [\n    {\n      \"id\": \"35149dfb-31d3-431c-a8bc-12a4034dac48\",\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              4.690751953125,\n              52.358740234375\n            ],\n            [\n              4.690751953125,\n              52.6333984375\n            ],\n            [\n              5.020341796875,\n              52.6333984375\n            ],\n            [\n              5.020341796875,\n              52.358740234375\n            ],\n            [\n              4.690751953125,\n              52.358740234375\n            ]\n          ]\n        ]\n      },\n      \"properties\": {\n        \"created\": \"2021-12-08\",\n        \"updated\": \"2022-06-10T01:27:47Z\",\n        \"type\": \"dataset\",\n        \"title\": \"Kaartboeck 1635\",\n        \"description\": \"Data uit kaartboeken van de periode 1635 tot 1775. De kaartboeken werden door het waterschap gebruikt om er op toe te zien dat de eigenaren geen water in beslag namen door demping.\\nDe percelen op de kaart zijn naar de huidige maatstaven vrij nauwkeurig gemeten en voorzien van een administratie met de eigenaren. bijzondere locaties van molens werven en beroepen worden in de boeken vermeld. Alle 97 kaarten aan een geven een zeer gedetailleerd beeld van de Voorzaan, Nieuwe Haven en de Achterzaan. De bladen Oost en West van de zaan zijn vrij nauwkeurig. De bladen aan de Voorzaan zijn een schetsmatige weergave van de situatie. De kaart van de Nieuwe Haven si weer nauwkeurig te noemen.\",\n        \"providers\": [\n          \"Team Geo, geo-informatie@zaanstad.nl, Gemeente Zaanstad\"\n        ],\n        \"externalIds\": [\n          {\n            \"scheme\": \"default\",\n            \"value\": \"35149dfb-31d3-431c-a8bc-12a4034dac48\"\n          }\n        ],\n        \"themes\": [\n          {\n            \"concepts\": [\n              \"ARGEOLOGIE\",\n              \"MONUMENTEN\",\n              \"KADASTER\",\n              \"KAARTBOEK\",\n              \"KAARTBOECK\",\n              \"HISTORIE\"\n            ]\n          }\n        ],\n        \"extent\": {\n          \"spatial\": {\n            \"bbox\": [\n              [\n                4.690751953125,\n                52.358740234375,\n                5.020341796875,\n                52.6333984375\n              ]\n            ],\n            \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n          },\n          \"temporal\": {\n            \"interval\": [\n              null,\n              null\n            ],\n            \"trs\": \"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\"\n          }\n        }\n      },\n      \"links\": [\n        {\n          \"href\": \"https://maps-intern.zaanstad.gem.local/geoserver/wms?SERVICE=WMS\",\n          \"rel\": \"item\",\n          \"title\": \"geo:kaartboeck\",\n          \"type\": \"OGC:WMS\"\n        },\n        {\n          \"href\": \"https://maps-intern.zaanstad.gem.local/geoserver/wfs?SERVICE=WFS\",\n          \"rel\": \"item\",\n          \"title\": \"geo:kaartboeck\",\n          \"type\": \"OGC:WFS\"\n        },\n        {\n          \"href\": \"https://maps-intern.zaanstad.gem.local/geoserver/wfs?SERVICE=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=geo:kaartboeck&amp;outputFormat=csv\",\n          \"rel\": \"item\",\n          \"type\": \"download\"\n        },\n        {\n          \"href\": \"https://maps-intern.zaanstad.gem.local/geoserver/wfs?SERVICE=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=geo:kaartboeck&amp;outputFormat=shape-zip\",\n          \"rel\": \"item\",\n          \"type\": \"download\"\n        }\n      ]\n    }\n</code></pre> <p>Note that this document is a valid GeoJSON document.</p> <p>OGC API - Records supports the same query parameters as specified in OGC API - Features.  In addition, OGC API - Records adds a set of core, fixed queryables.  An example query based on a \"search engine\" style search using the q parameter is https://demo.pygeoapi.io/master/collections/dutch-metadata/items?f=json&amp;q=biomassa</p> <p>Note</p> <p>Consult the OGC API - Records - Part 1: Core specification for more information on core queryables.</p>"},{"location":"api-deep-dive/records/#record-core","title":"Record core","text":"<p>Given OGC API - Records uses OGC API - Common and OGC API - Features as building blocks, please see the OGC API - Features deep dive for a detailed explanation.</p>"},{"location":"api-deep-dive/records/#geojson","title":"GeoJSON","text":"<p>The OGC API - Records GeoJSON Requirements Class specifies a GeoJSON based encoding for Record core, based on RFC7946.  Given the ubiquity of GeoJSON, numerous tools exist to validate process and decode/encode GeoJSON, making OGC API - Records GeoJSON easy to include in metadata processing pipelines.  OGC API - Records includes the JSON Schema for the GeoJSON representation and thus can be used for runtime or offline validation of metadata payloads.  Applications based on OGC API - Records GeoJSON can extend and constrain the schema accordingly for domain specific workflows.</p>"},{"location":"api-deep-dive/records/#summary","title":"Summary","text":"<p>OGC API - Records provides functionality for working with metadata data on the Web. This deep dive provided an overview of the standard and the various Resources and endpoints that are supported.</p>"},{"location":"api-deep-dive/sensorthings/","title":"OGC SensorThings API","text":"<p>Audience</p> <p>Students that are familiar with web services and want to have an overview of the SensorThings Application Programming Interface (API) standard</p> <p>Learning Objectives</p> <p>At completion of the module students will be able to:</p> <ul> <li>Explain what the SensorThings API is</li> <li>Describe what can be done with the SensorThings API</li> <li>Understand how to retrieve data through the SensorThings API</li> <li>Understand how to publish sensor-collected data through the SensorThings API</li> <li>Be able to find a SensorThings API endpoint and use it through a client</li> </ul>"},{"location":"api-deep-dive/sensorthings/#introduction","title":"Introduction","text":"<p>The Internet of Things (IoT) is a global information infrastructure that enables advanced services by interconnecting both physical and virtual \"things\" based on existing and evolving interoperable information and communication technologies [ITU-T]. To facilitate geospatial interoperability between devices in the IoT, the OGC has published the OGC SensorThings API.</p> <p>The OGC SensorThings API is a multi-part standard for an open and geospatial-enabled approach for interconnecting devices, data, and applications of the Internet of Things (IoT). The first part of the standard describes the interface for Sensing. The second part describes the interface for Tasking. The Sensing part standardizes the management and retrieval of observations and metadata from heterogeneous IoT sensor systems. The Tasking part provides a standard way for parameterizing - also called tasking - of IoT devices that can be instructed to carry out observations or perform other functions. SensorThings also includes an extension, STAplus, specifically developed to address the requirements from the Citizen Science community.</p> <p>Note</p> <p>This tutorial module is not intended to be a replacement to the actual OGC SensorThings API Part 1: Sensing standard. The tutorial intentionally focuses on a subset of capabilities in order to get the student started with using the standard. Please refer to the OGC SensorThings API Part 1: Sensing standard for additional detail.</p> <p></p>"},{"location":"api-deep-dive/sensorthings/#background","title":"Background","text":"<p>History</p> <p>The OGC SensorThings API is based on the existing OGC Sensor Web Enablement (SWE) standards. It was developed to address the specific needs of the IoT community. SensorThings API Part 1: Sensing version 1.0 was approved by the OGC Technical Committee in February 2016.</p> <p>Versions</p> <p>OGC SensorThings API Part 1: Sensing Version 1.1 and OGC SensorThings API Part 2 \u2013 Tasking Core Version 1.0.0 are the current latest versions. The current latest version of the STAplus extension is 1.0.0.</p> <p>Test suite</p> <p>A test suite is available for:</p> <ul> <li>SensorThings API - Part 1</li> </ul> <p>Public Endpoints</p> <p>A list of public endpoints can be found here: https://github.com/opengeospatial/sensorthings/blob/master/PublicEndPoints.md</p>"},{"location":"api-deep-dive/sensorthings/#usage","title":"Usage","text":"<p>The SensorThings API allows for the access and dissemination of sensor-collected data about any object of the physical world (physical things) or the information world (virtual things) that is capable of being identified and integrated into communication networks. The data is accessed through a resource-centric interface that is based on Representational state transfer (REST) principles. The data returned by the API is serialized in JavaScript Object Notation (JSON).</p> <p>The benefit of adopting REST and JSON for the SensorThings API is that they offer greater efficiency in devices of constrained Size, Weight and Power (SWaP) such as microcomputers, smart home controllers, nano-Unmanned Aerial Vehicles (UAVs), smartphones, smart watches and tablets. The use of REST also makes it easier for web developers and the applications they implement to access data through resource-centric Uniform Resource Locator (URL) patterns.</p> <ul> <li>OGC SensorThings API Part 1: Sensing - provides a standard way to manage and retrieve observations and metadata from heterogeneous IoT sensor systems.</li> <li>OGC SensorThings API Part 2: Tasking Core - provides a standard way for parameterizing - also called tasking - of taskable IoT devices, such as individual sensors and actuators, composite consumer / commercial / industrial / smart cities in-situ platforms, mobile and wearable devices, or even unmanned systems platforms such as drones, satellites, connected and autonomous vehicles, etc. </li> <li>OGC SensorThings API Extension: STAplus - is designed to support a model in which observations are owned by different users. This results in requirements for the ownership concept. In addition to the ownership, users may express a license for ensuring proper re-use of their observations. The STAplus extension also supports expressing explicit relations between observations as well as between observations and external resources. Relations can enrich observations to enable future extensions supporting Linked Data, RDF and SPARQL. Observation group(s) allow the grouping of observations that belong together.</li> </ul> <p>Note</p> <p>The rest of this tutorial will focus on Version 1.0 of the Part 1 of the standard (e.g.: Sensing). Version 1.1 of SensorThings API Part 1 is an update to version 1.0 that is (mostly) backwards compatible with version 1.0. </p>"},{"location":"api-deep-dive/sensorthings/#relation-to-other-ogc-standards","title":"Relation to other OGC Standards","text":"<ul> <li>Sensor Observation Service Interface Standard (SOS): The     SensorThings API is designed specifically to enable the     dissemination of observations from resource-constrained IoT devices     and the Web developer community. In contrast to SOS, the     SensorThings API uses approaches that are considered more efficient     for example, REST, JSON and the Message Queuing Telemetry Transport     (MQTT).</li> <li>Web Feature Service Interface Standard (WFS) : The WFS standard is     designed to allow for serving feature types of any kind. Other than     requiring the data to be serializable in Geography Markup Language     (GML), WFS does not place any other significant constraints. In     contrast, SensorThings API formalized how specific entities and     concepts should be represented and serialized.</li> </ul>"},{"location":"api-deep-dive/sensorthings/#overview-of-resources","title":"Overview of Resources","text":"<p>SensorThings API provides a serious of entities as resources. The following is a list entities supported by the API:</p> <p>Thing</p> <pre><code>The OGC SensorThings API follows the ITU-T definition, i.e., with\nregard to the Internet of Things, a thing is an object of the\nphysical world (physical things) or the information world (virtual\nthings) that is capable of being identified and integrated into\ncommunication networks ITU-T.\n</code></pre> <p>Location</p> <pre><code>The Location entity locates the Thing or the Things it associated\nwith. A Thing's Location entity is defined as the last known\nlocation of the Thing.\n</code></pre> <p>HistoricalLocation</p> <pre><code>A Thing's HistoricalLocation entity set provides the times of the\ncurrent (i.e., last known) and previous locations of the Thing.\n</code></pre> <p>Datastream</p> <pre><code>A Datastream groups a collection of Observations measuring the same\nObservedProperty and produced by the same Sensor.\n</code></pre> <p>Sensor</p> <pre><code>A Sensor is an instrument that observes a property or phenomenon\nwith the goal of producing an estimate of the value of the property.\n</code></pre> <p>ObservedProperty</p> <pre><code>An ObservedProperty specifies the phenomenon of an Observation.\n</code></pre> <p>Observation</p> <pre><code>An Observation is the act of measuring or otherwise determining the\nvalue of a property.\n</code></pre> <p>FeatureOfInterest</p> <pre><code>The phenomenon against which an observation is made is a property of\nthe feature of interest.\n</code></pre> <p>The figure below shows the relations between sensing entities.</p> <p></p>"},{"location":"api-deep-dive/sensorthings/#example","title":"Example","text":"<p>This SensorThings API server publishes sample data about available bikes and docks from a Toronto bike share station.</p> <p>An example request to retrieve sensors through the API is shown below.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Sensors</p> <p>The response, which is presented below, reports that there are two sensors: one for tracking how many docks are available in a bike station and another sensor for tracking how many bikes are available in a bike station.</p> <pre><code>{\"@iot.count\":2,\n    \"value\":[\n        {\"@iot.id\":4,\"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Sensors(4)\",\"description\": \"A sensor for tracking how many docks are available in a bike station\",\"name\": \"available_docks\",\"encodingType\": \"text/plan\",\"metadata\": \"https://member.bikesharetoronto.com/stations\",\"Datastreams@iot.navigationLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Sensors(4)/Datastreams\"\n              },\n        {\"@iot.id\":3,\"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Sensors(3)\",\"description\": \"A sensor for tracking how many bikes are available in a bike station\",\"name\": \"available_bikes\",\"encodingType\": \"text/plan\",\"metadata\": \"https://member.bikesharetoronto.com/stations\",\"Datastreams@iot.navigationLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Sensors(3)/Datastreams\"\n              }\n           ]\n}\n</code></pre> <p>The data returned by the service can be rendered by a desktop Geographic Information System (GIS) or a web application. Alternatively, it can be forwarded to an OGC API - Processes service for further processing.</p>"},{"location":"api-deep-dive/sensorthings/#client-usage","title":"Client usage","text":"<p>A client needs to know the location of the SensorThings API service to be able to interact with the server. The location is usually called the <code>endpoint</code> of the service and is represented by the service root URI. Resources available through the service can be accessed by appending a resource path and, optionally query options.</p> <p>For example, the first line of the following URL is the service root URI. The second line is the resource path. The third line is the query option.</p> <pre><code>http://toronto-bike-snapshot.sensorup.com/v1.0\n/Datastreams(206051)/Observations(1593917)\n?$select=result\n</code></pre> <p>The link to the request is: http://toronto-bike-snapshot.sensorup.com/v1.0/Datastreams(206051)/Observations(1593917)?$select=result</p> <p>Checkout various available public endpoints here</p>"},{"location":"api-deep-dive/sensorthings/#operations","title":"Operations","text":"<p>The entities offered by a SensorThings API service can be accessed by appending a resource path to the service root URI. An example of a URL that retrieves observations is shown below.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Observations</p> <p>An extract of the response is presented below. Notice how the instances of the requested entity are presented in a JSON array.</p> <pre><code>{\"@iot.count\":1594349,\n    \"@iot.nextLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations?$top=100&amp;$skip=100\",\"value\":\n        [\n            {\"@iot.id\":1595550,\"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595550)\",\"phenomenonTime\": \"2017-02-16T21:55:12.841Z\",\"result\": \"7\",\"resultTime\":null,\"Datastream@iot.navigationLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595550)/Datastream\",\"FeatureOfInterest@iot.navigationLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595550)/FeatureOfInterest\"\n                },\n            {\"@iot.id\":1595551,\"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595551)\",\"phenomenonTime\": \"2017-02-16T21:55:12.841Z\",\"result\": \"4\",\"resultTime\":null,\"Datastream@iot.navigationLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595551)/Datastream\",\"FeatureOfInterest@iot.navigationLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595551)/FeatureOfInterest\"\n                },\n                ...\n        ]\n}\n</code></pre> <p>Other entities can also be retrieved through resource paths of a similar pattern. The following table lists the resource paths of each entity type.</p> Entity Sets Offered Entity Set Method Resource Path Things GET /Things Locations GET /Locations Historical locations GET /HistoricalLocations Datastreams GET /Datastreams Sensors GET /Sensors Observed properties GET /ObservedProperties Observations GET /Observations Features of interest GET /FeaturesOfInterest <p>In addition to accessing an entity, the property of an entity can also be accessed in a similar way by appending the name of the property to the resource path. The following is an example of a request that retrieves a property named <code>result</code> from a specific observation.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595550)/result</p> <p>Examples of resource paths of properties are shown in the following table.</p> Property Resource Path Examples Property Method Resource Path Result of an observation with an ID of 1595550 GET /Observations(1595550)/result The name of a feature of interest GET /Sensor(4)/metadata Coordinates of the feature observed by observation 1595550 GET /Observations(1595550)/FeatureOfInterest/feature"},{"location":"api-deep-dive/sensorthings/#retrieval-options","title":"Retrieval Options","text":""},{"location":"api-deep-dive/sensorthings/#filter","title":"$filter","text":"<p>The <code>$filter</code> system option allows clients to filter a collection of entities that are addressed by a request URL.</p> <p>For example, the following request returns all Observations whose result is less than 15.00.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Observations?$filter=result%20lt%2015.00</p>"},{"location":"api-deep-dive/sensorthings/#count","title":"$count","text":"<p>The <code>$count</code> query option specifies whether the total count of items within a collection matching the request should be returned along with the result.</p> <p>For example, the following request returns the total number of Observations in the collection, as well as the results. Changing the value of the <code>$count</code> option to false causes the count to be omitted from the response.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Observations?$count=true</p>"},{"location":"api-deep-dive/sensorthings/#orderby","title":"$orderby","text":"<p>The <code>$orderby</code> query option specifies the order in which items are returned from the service.</p> <p>For example, the following request all Observations arranged in ascending order of the result property</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Observations?$orderby=result</p>"},{"location":"api-deep-dive/sensorthings/#skip","title":"$skip","text":"<p>The <code>$skip</code> query option specifies the number for the items of the queried collection that should be excluded from the result.</p> <p>For example, the following request all Observations starting with the twenty-first Observation entity.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Observations?$skip=20</p>"},{"location":"api-deep-dive/sensorthings/#top","title":"$top","text":"<p>The <code>$top</code> query option specifies the limit on the number of items returned from a collection of entities.</p> <p>For example, the following request returns only the first six entities in the Observations collection.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Observations?$top=6</p>"},{"location":"api-deep-dive/sensorthings/#expand","title":"$expand","text":"<p>The <code>$expand</code> query option enables the client to specify the set of properties to be included in a response by indicating that the related entities are to be represented inline.</p> <p>For example, the following request returns the complete entity set of Things and their associated Datastreams.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Things?$expand=Datastreams</p>"},{"location":"api-deep-dive/sensorthings/#select","title":"$select","text":"<p>The <code>$select</code> query option enables the client to specify the set of properties to be included in a response by instructing the service to return only the properties explicitly requested.</p> <p>For example, the following request returns each Observation entity with only the result and phenomenonTime properties listed.</p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/Observations?$select=result,phenomenonTime</p>"},{"location":"api-deep-dive/sensorthings/#demo","title":"Demo","text":"<p>On this section, we explore different ways to access a SensorThings API server on: </p> <p>http://toronto-bike-snapshot.sensorup.com/v1.0/</p>"},{"location":"api-deep-dive/sensorthings/#web-client","title":"Web Client","text":"<p>We start exploring the different endpoints available in the server using a web browser. In alternative you could also use postman or curl.</p>"},{"location":"api-deep-dive/sensorthings/#return-base-resource-path","title":"Return Base Resource Path","text":"<p>http://toronto-bike-snapshot.sensorup.com/v1.0/</p> <pre><code>{  \n  \"value\":[  \n      {  \n          \"name\": \"Things\",\n          \"url\": \"http://pm25-march.singapore2017.sensorup.com/v1.0/Things\"\n      },\n      {  \n          \"name\": \"Locations\",\n          \"url\": \"http://pm25-march.singapore2017.sensorup.com/v1.0/Locations\"\n      },\n      {  \n          \"name\": \"HistoricalLocations\",\n          \"url\": \"http://pm25-march.singapore2017.sensorup.com/v1.0/HistoricalLocations\"\n      },\n      {  \n          \"name\": \"Datastreams\",\n          \"url\": \"http://pm25-march.singapore2017.sensorup.com/v1.0/Datastreams\"\n      },\n      {  \n          \"name\": \"Sensors\",\n          \"url\": \"http://pm25-march.singapore2017.sensorup.com/v1.0/Sensors\"\n      },\n      {  \n          \"name\": \"Observations\",\n          \"url\": \"http://pm25-march.singapore2017.sensorup.com/v1.0/Observations\"\n      },\n      {  \n          \"name\": \"ObservedProperties\",\n          \"url\": \"http://pm25-march.singapore2017.sensorup.com/v1.0/ObservedProperties\"\n      },\n      {  \n          \"name\": \"FeaturesOfInterest\",\n          \"url\": \"http://pm25-march.singapore2017.sensorup.com/v1.0/FeaturesOfInterest\"\n      }\n      ]\n      }\n</code></pre>"},{"location":"api-deep-dive/sensorthings/#which-things-are-available-in-the-server","title":"Which Things are available in the server?","text":"<p>http://toronto-bike-snapshot.sensorup.com/v1.0/Things</p> <pre><code>{  \n\"@iot.count\":199,\n\"@iot.nextLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/\n      Things?$top=100&amp;$skip=100\",\n\"value\":[  \n {  \n   \"@iot.id\":206047,\n   \"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Things(206047)\",\n   \"description\": \"Bloor St / Brunswick Ave Toronto bike share station with data\n             of available bikes and available docks\",\n   \"name\": \"7061:Bloor St / Brunswick Ave\",\n   \"properties\":{  \n\n   },\n   ...\n</code></pre>"},{"location":"api-deep-dive/sensorthings/#getting-a-datastream-for-a-thing","title":"Getting a Datastream for a thing","text":"<p>http://toronto-bike-snapshot.sensorup.com/v1.0/Things(206047)/Datastreams</p> <pre><code>{  \n \"@iot.count\":2,\n \"value\":[  \n {  \n   \"@iot.id\":206051,\n   \"@iot.selfLink\":\n       \"http://toronto-bike-snapshot.sensorup.com/v1.0/Datastreams(206051)\",\n   \"description\":\n       \"... available docks count for the Toronto bike share station Bloor St \",\n   \"name\": \"7061:Bloor St / Brunswick Ave:available_docks\",\n   \"observationType\":\n       \"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_CountObservation\",\n   \"unitOfMeasurement\":{  \n     \"symbol\": \"{TOT}\",\n     \"name\": \"dock count\",\n     \"definition\": \"http://unitsofmeasure.org/ucum.html#para-50\"\n   },\n   ....\n</code></pre> <p>Note</p> <p>Datastreams define the unit of measurement</p> <pre><code>\"observationType\":\n    \"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_CountObservation\",\n\"unitOfMeasurement\":{  \n  \"symbol\": \"{TOT}\",\n  \"name\": \"dock count\",\n  \"definition\": \"http://unitsofmeasure.org/ucum.html#para-50\"\n},\n</code></pre>"},{"location":"api-deep-dive/sensorthings/#getting-the-observations-related-to-a-stream","title":"Getting the Observations related to a stream","text":"<p>http://toronto-bike-snapshot.sensorup.com/v1.0/Datastreams(206051)/Observations</p> <pre><code>{  \n\"@iot.count\":3511,\n\"@iot.nextLink\":\n      \"http://toronto-bike-snapshot.sensorup.com/...\",\n\"value\":[  \n {  \n   \"@iot.id\":1595467,\n   \"@iot.selfLink\":\n      \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595467)\",\n   \"phenomenonTime\": \"2017-02-16T21:55:12.233Z\",\n   \"result\": \"23\",\n   \"resultTime\":null,\n   \"Datastream@iot.navigationLink\":\n      \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595467)/Datastream\",\n   \"FeatureOfInterest@iot.navigationLink\":\n      \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595467)/FeatureOfInterest\"\n },\n</code></pre>"},{"location":"api-deep-dive/sensorthings/#complex-query","title":"Complex Query","text":"<ul> <li>Expands Datastreams and observations in one query</li> <li>Feature of Interest = 7000:Ft. York / Capreol Crt.</li> <li>Start time = 2017-01-01T11:30:00.000Z</li> <li>End time = 2017-03-01T11:30:00.000Z</li> </ul> <p>Link</p> <pre><code>http://toronto-bike-snapshot.sensorup.com/v1.0/Things?\n$expand=Datastreams/Observations/FeatureOfInterest&amp;\n$filter=Datastreams/Observations/FeatureOfInterest/\nname eq '7000:Ft. York / Capreol Crt.' and\nDatastreams/Observations/phenomenonTime ge 2017-01-01T11:30:00.000Z \nand\nDatastreams/Observations/phenomenonTime le 2017-03-01T11:30:00.000Z\n</code></pre>"},{"location":"api-deep-dive/sensorthings/#complex-query-response","title":"Complex Query Response","text":"<pre><code>{  \n\"@iot.count\":1,\n\"value\":[  \n {  \n   \"@iot.id\":5,\n   \"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Things(5)\",\n   \"description\":\n         \"Ft. York / Capreol Crt. Toronto bike share station available bikes and docks\",\n   \"name\": \"7000:Ft. York / Capreol Crt.\",\n   \"properties\":{  \n\n   },\n   \"Datastreams\":[  \n     {  \n       \"@iot.id\":9,\n       \"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Datastreams(9)\",\n       \"description\":\n            \"...available docks count for the Toronto bike share station Ft. York / Capreol Crt.\",\n       \"name\": \"7000:Ft. York / Capreol Crt.:available_docks\",\n       \"observationType\":\n            \"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_CountObservation\",\n       \"unitOfMeasurement\":{  \n         \"symbol\": \"{TOT}\",\n         \"name\": \"dock count\",\n         \"definition\": \"http://unitsofmeasure.org/ucum.html#para-50\"\n       },\n\"Observations@iot.nextLink\":\n         \".../v1.0/Datastreams(9)/Observations?$top=100&amp;$skip=100\",\n \"Observations\":[  \n   {  \n     \"@iot.id\":1595545,\n     \"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/Observations(1595545)\",\n     \"phenomenonTime\": \"2017-02-16T21:55:12.797Z\",\n     \"result\": \"10\",\n     \"resultTime\":null,\n     \"Datastream@iot.navigationLink\":\n            \".... /v1.0/Observations(1595545)/Datastream\",\n     \"FeatureOfInterest\":{  \n       \"@iot.id\":10,\n       \"@iot.selfLink\": \"http://toronto-bike-snapshot.sensorup.com/v1.0/FeaturesOfInterest(10)\",\n       \"description\": \"  ...\n</code></pre>"},{"location":"api-deep-dive/sensorthings/#qgis-plugin","title":"QGIS Plugin","text":"<p>The SensorThings API plugin enables QGIS software to access dynamic data from sensors, using SensorThings API protocol.</p> <p>In order to install this plugin from the QGIS repository, you will need to enable experimental plugins, in the plugins settings.</p> <p></p> <p>Open the plugin and enter SensorThings API with <code>/Locations</code></p> <p>In our case we'll connect to  <pre><code>Name - Surface, Atmospheric, and Groundwater data\nURL - https://labs.waterdata.usgs.gov/sta/v1.1/Locations\n</code></pre></p> <p>Now you can either add each sensors as new layer or combine all in one layer </p> <p>Now we can check more information about each Location by activate <code>Show Location Information</code> and then clicking on sensor</p> <p></p> <p>Each sensor also has observation panel which allows us to see complete spatio-temporal data for each sensor in table and graph format </p>"},{"location":"api-deep-dive/sensorthings/#references","title":"References","text":"<p>ITU-T, Overview of the Internet of things</p> <p>SensorUp SensorThings API</p>"},{"location":"api-deep-dive/sensorthings/#summary","title":"Summary","text":"<p>The OGC SensorThings API provides an open and unified way to interconnect IoT devices, data, and applications over the Web. It builds on Web protocols and the OGC Sensor Web Enablement standards, and applies an easy-to-use REST-like style. This deep dive provided an overview of the entities and main operations made available by this standard.</p>"},{"location":"api-deep-dive/styles/","title":"OGC API - Styles","text":"<p>Audience</p> <p>Students that are familiar with web services and APIs, and want to have an overview of OGC API - Styles standard</p> <p>Learning Objectives</p> <p>At the completion of the module students will be able to:</p> <ul> <li>Explain what the OGC API - Styles standard is</li> <li>Describe what can be done with OGC API - Styles implementations</li> <li>Understand the main resources offered by OGC API - Styles implementations</li> <li>Understand how to retrieve a description of the capabilities of an OGC API - Styles implementation</li> <li>Understand how to issue requests to an implementation of OGC API - Styles</li> <li>Be able to find an OGC API - Styles endpoint and use it through a client</li> </ul>"},{"location":"api-deep-dive/styles/#introduction","title":"Introduction","text":"<p>OGC API - Styles is a standard that describes an API that enables map servers, clients as well as visual style editors, to manage and fetch styles. The styles consist of symbolizing instructions that can be applied by a rendering engine on features and/or coverages. The API implements the conceptual model for style encodings and style metadata.</p> <p>Note</p> <p>This tutorial module is not intended to be a replacement to the actual OGC API - Styles - Part 1: Core standard. The tutorial intentionally focuses on a subset of capabilities in order to get the student started with using the standard. Please refer to the OGC API - Styles - Part 1: Core standard for additional detail.</p>"},{"location":"api-deep-dive/styles/#background","title":"Background","text":"<p>History</p> <p>The need for users and software to be able to control the visual portrayal of geospatial data was already present in the first generation of OGC Web Services. </p> <p>In 2001, Web Map Service (WMS) 1.1.0 introduced enhanced support for styles using the Styled Layer Descriptor (SLD) Implementation Specification. This specification extended WMS to allow user-defined symbolization of feature data. In 2007, SLD became a profile of WMS.</p> <p>The evolution of the new web APIs also brought new capabilities in terms of changing, sharing and rendering styles, which were explored in OGC Testbed-15 Open Portrayal Framework (OPF), in 2019. This work was documented in the OGC Testbed-15: Styles API Engineering Report. The following year, in 2020, the charter for the OGC API - Styles Standards Working Group was drafted.</p> <p>Versions</p> <p>OGC API - Styles - Part 1: Core is currently in draft.</p> <p>Test suite</p> <p>There are no test suites currently implemented; they will be made available once the specification is   approved, and an executable test suite (ETS) is made availabe as per of OGC CITE.</p> <p>Implementations</p> <p>Implementations can be found on the implementations page.</p>"},{"location":"api-deep-dive/styles/#usage","title":"Usage","text":"<p>The Styles API supports three main types of consumers:</p> <ul> <li>Visual style editors that create, update and delete styles for datasets shared by other OGC APIs that publish feature or coverage data. Feature data is either accessed directly or organized into spatial partitions (e.g.: vector tiles).</li> <li>OGC API - Maps implementations, that fetch styles and render spatial data (features or coverages) on the server.</li> <li>Map clients that fetch styles and render spatial data (features or coverages) on the client.</li> </ul> <p>The draft Standard also defines a conceptual model for styles, style encodings and style metadata. The model defines three main concepts, which are mapped to resources and documents.</p> <ul> <li>Style: the main resource.</li> <li>Stylesheets: the representation of a style in an encoding like OGC SLD 1.0 or Mapbox Style. Each style is available in one or more stylesheets. Clients will use the stylesheet of a style that fits best based on the capabilities of available tools and their preferences. </li> <li>Style metadata: general descriptive information about the style, structural information (e.g., layers and attributes), and so forth to allow users to discover and select existing styles for their data. For each style there is style metadata available.</li> </ul> <p>Note</p> <p>Draft OGC API - Styles - Part 1: Core offers conformance classes for fetching styles and style metadata, managing and validating styles.</p>"},{"location":"api-deep-dive/styles/#relation-to-other-standards","title":"Relation to other standards","text":"<p>OGC API - Styles is designed to be combined with other OGC API Standards, in order to produce styled geospatial data. Feature or coverage data published through OGC APIs, can be styled on client side with styles produced by OGC API - Styles editors. This is the case of OGC API - Features, OGC API - Coverages or OGC API - Tiles (vector tiles). OGC API - Maps has support for fetching styles and rendering geospatial data (features or coverages) on server side. </p> <p>The styles themselves can be represented using different encodings. As usual in OGC API, no encodings are prescribed, although the draft Standard offers conformance classes for OGC SLD 1.0/1.1 and Mapbox Styles.</p>"},{"location":"api-deep-dive/styles/#overview-of-resources","title":"Overview of Resources","text":"<p>OGC API - Styles - Part 1: Core defines the resources listed in the following table.</p> Resource Method Path Purpose Landing page GET / This is the top-level resource, which serves as an entry point. Conformance declaration GET /conformance This resource presents information about the functionality that is implemented by the server. Fetch Styles GET /styles This resource lists the styles that are offered through the API. Create or validate Styles POST /styles This resource enables the creation of a new Style or the validation of an existing one. Fetch Style GET /styles/{styleId} This resource retrieves the style identified in the path. Create or validate Style PUT /styles/{styleId} This resource can be used to update, create or validate the style identified in the path. Delete Style DELETE /styles/{styleId} This resource can be used to delete the style identified in the path. Fetch Style metadata GET /styles/{styleId}/metadata This resource retrieves the metadata of the style identified in the path. Replace Style metadata PUT /styles/{styleId} This resource replaces the metadata of the style identified in the path. Patch Style metadata PATCH /styles/{styleId} This resource updates parts of the metadata of the style identified in the path. Fetch resources GET /resources This operation fetches the set of resources (e.g.: symbols and sprites) that have been created and that may be used by reference in stylesheets. Fetch symbol resource by id GET /resources/{resourceId} This operation fetches the resource with identifier resourceId. The set of available resources can be retrieved at /resources. Replace symbol resource or add new one PUT /resources/{resourceId} This operation replaces an existing resource with the id resourceId. If no such resource exists, a new resource with that id is added. This operation is only available to registered style authors. Delete symbol resource DELETE /resources/{resourceId} This operation deletes an existing resource with the id resourceId. If no such resource exists, an error is returned. This operation is only available to registered style authors. <p>Note</p> <p>A sprite used in a Mapbox Style stylesheet consists of three resources: </p> <ul> <li>PNG bitmap image (resourceId ends in '.png').</li> <li>JSON index file (resourceId of the same name, but ends in '.json' instead of '.png')</li> <li>PNG bitmap image for high-resolution displays (the file ends in '.@2x.png').</li> </ul> <p>Each of the resources needs to be created (and eventually deleted) separately. </p> <p></p>"},{"location":"api-deep-dive/styles/#example","title":"Example","text":"<p>This demonstration server publishes styles through an interface that conforms to OGC API - Features.</p> <p>An example request that can be used to list the styles from the Daara collection is https://demo.ldproxy.net/daraa/styles?f=html</p> <p>Note that the response to the request is HTML in this case.</p> <p>Alternatively, the same data can be retrieved in GeoJSON format, through the request https://demo.ldproxy.net/daraa/styles?f=json</p> <p>These styles can be rendered by a client application, or applied directly by other OGC APIs that support styles. The example below shows the Night style, being applied by OGC API - Maps. https://demo.ldproxy.net/daraa/styles/night?f=html#12.24/32.6264/36.1033</p> <p> </p>"},{"location":"api-deep-dive/styles/#resources","title":"Resources","text":"<p>Styles are the main resources of this API. </p> <ul> <li> <p>For each style there is style metadata available, with general descriptive information about the style, structural information (e.g., layers and attributes), and so forth to allow users to discover and select existing styles for their data.</p> </li> <li> <p>Each style is available as one or more stylesheets - the representation of a style in an encoding like OGC SLD 1.0 or Mapbox Style. Clients will use the stylesheet of a style that fits best based on the capabilities of available tools and their preferences.</p> </li> </ul> <p>A basic request workflow could look like the diagram below, where a client requests the list of styles, and then asks for more information about a particular style, before fetching the stylesheet. In alternative, a client can request the stylesheet directly after the styles request. </p> <p></p> <p>Note</p> <p>This section will focus on the resources related to requirements class \"Core\": fetching styles, style and style metadata.  </p>"},{"location":"api-deep-dive/styles/#landing-page","title":"Landing page","text":"<p>Given OGC API - Styles uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/styles/#conformance-declarations","title":"Conformance declarations","text":"<p>Given OGC API - Styles uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/styles/#api-definition","title":"API Definition","text":"<p>Given OGC API - Styles uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/styles/#style-list","title":"Style list","text":"<p>This endpoint, lists the styles available on the server, and for each describes basic information like its id, title and description, as well as the available stylesheets.</p> <p>Below is an extract from the response to the request https://demo.ldproxy.net/daraa/styles?f=json.</p> <pre><code>{\n  \"styles\": [\n    {\n      \"title\": \"night\",\n      \"id\": \"night\",\n      \"links\": [\n        {\n          \"rel\": \"describedby\",\n          \"title\": \"Style metadata\",\n          \"href\": \"https://demo.ldproxy.net/daraa/styles/night/metadata\"\n        },\n        {\n          \"rel\": \"stylesheet\",\n          \"type\": \"text/html\",\n          \"title\": \"Web map using the style\",\n          \"href\": \"https://demo.ldproxy.net/daraa/styles/night?f=html\"\n        },\n        {\n          \"rel\": \"stylesheet\",\n          \"type\": \"application/vnd.mapbox.style+json\",\n          \"title\": \"Style in format 'Mapbox'\",\n          \"href\": \"https://demo.ldproxy.net/daraa/styles/night?f=mbs\"\n        }\n      ]\n    },\n</code></pre> <p>In this response, we can see that the links to retrieve more information about the style (e.g.: style metadata) and to retrieve it as a stylesheet.</p>"},{"location":"api-deep-dive/styles/#style-metadata","title":"Style metadata","text":"<p>Requests the metadata for a particular style, so that a client has more information about a potential style of interest. The response format (typically HTML or JSON, but extensions can easily supply others) is determined using HTTP content negotiation.</p> <p>In the sample below, we request information about the topographic style. The full response can be retrieved using this request: https://demo.ldproxy.net/daraa/styles/topographic/metadata?f=json</p> <pre><code>{\n  \"title\": \"topographic\",\n  \"links\": [\n    {\n      \"rel\": \"self\",\n      \"type\": \"application/json\",\n      \"title\": \"This document\",\n      \"href\": \"https://demo.ldproxy.net/daraa/styles/topographic/metadata?f=json\"\n    },\n    {\n      \"rel\": \"alternate\",\n      \"type\": \"text/html\",\n      \"title\": \"This document as HTML\",\n      \"href\": \"https://demo.ldproxy.net/daraa/styles/topographic/metadata?f=html\"\n    }\n  ],\n  \"id\": \"topographic\",\n  \"scope\": \"style\",\n  \"stylesheets\": [\n    {\n      \"title\": \"Mapbox\",\n      \"version\": \"8\",\n      \"specification\": \"https://docs.mapbox.com/mapbox-gl-js/style-spec/\",\n      \"native\": true,\n      \"link\": {\n        \"rel\": \"stylesheet\",\n        \"type\": \"application/vnd.mapbox.style+json\",\n        \"title\": \"Style in format 'Mapbox'\",\n        \"href\": \"https://demo.ldproxy.net/daraa/styles/topographic?f=mbs\"\n      }\n    }\n  ],\n</code></pre>"},{"location":"api-deep-dive/styles/#fetch-style","title":"Fetch Style","text":"<p>This request returns a stylesheet. If multiple encodings are available, the style encoding is determined using HTTP content negotiation. For instance, a client looking for a Mapbox stylesheet, could request the <code>application/vnd.mapbox.style+json</code> type.</p> <p>In the example below, the topographic style is retrieved as a Mapbox stylesheet. </p> <p>https://demo.ldproxy.net/daraa/styles/topographic?f=mbs</p> <p>This sample shows an extract of the Mapbox spec 8.0, response.</p> <pre><code>    \"daraa\": {\n      \"type\": \"vector\",\n      \"tiles\": [\n        \"https://demo.ldproxy.net/daraa/tiles/WebMercatorQuad/{z}/{y}/{x}?f=mvt\"\n      ],\n      \"bounds\": [\n        35.755073,\n        32.357351,\n        37.205276,\n        33.26714\n      ],\n      \"scheme\": \"xyz\",\n      \"maxzoom\": 16\n    }\n  },\n  \"sprite\": \"https://demo.ldproxy.net/daraa/resources/sprites\",\n  \"glyphs\": \"https://go-spatial.github.io/carto-assets/fonts/{fontstack}/{range}.pbf\",\n  \"layers\": [\n    {\n      \"id\": \"Grey Background\",\n      \"type\": \"background\",\n      \"layout\": {\n        \"visibility\": \"visible\"\n      },\n      \"paint\": {\n        \"background-color\": \"#d3d3d3\"\n      }\n    },\n    {\n      \"id\": \"OSM\",\n      \"type\": \"raster\",\n      \"source\": \"osm\",\n      \"layout\": {\n        \"visibility\": \"none\"\n      }\n    },\n    {\n      \"id\": \"agriculturesrf\",\n      \"type\": \"fill\",\n      \"source\": \"daraa\",\n      \"source-layer\": \"AgricultureSrf\",\n      \"paint\": {\n        \"fill-color\": \"#7ac5a5\"\n      }\n    },\n    {\n      \"id\": \"vegetationsrf\",\n      \"type\": \"fill\",\n      \"source\": \"daraa\",\n      \"source-layer\": \"VegetationSrf\",\n      \"paint\": {\n        \"fill-color\": \"#C2E4B9\"\n      }\n    },\n    {\n      \"id\": \"settlementsrf.1\",\n      \"type\": \"line\",\n      \"source\": \"daraa\",\n      \"source-layer\": \"SettlementSrf\",\n      \"paint\": {\n        \"line-color\": \"#000000\",\n        \"line-width\": 2\n      }\n    },\n    {\n      \"id\": \"settlementsrf.2\",\n      \"type\": \"fill\",\n      \"source\": \"daraa\",\n      \"source-layer\": \"SettlementSrf\",\n      \"paint\": {\n        \"fill-color\": \"#E8C3B2\"\n      }\n    },\n    {\n      \"id\": \"militarysrf\",\n      \"type\": \"fill\",\n      \"source\": \"daraa\",\n      \"source-layer\": \"MilitarySrf\",\n      \"paint\": {\n        \"fill-color\": \"#f3602f\",\n        \"fill-opacity\": 0.5\n      }\n    },\n    {\n      \"id\": \"culturesrf\",\n      \"type\": \"fill\",\n      \"source\": \"daraa\",\n      \"source-layer\": \"CultureSrf\",\n      \"paint\": {\n        \"fill-color\": \"#ab92d2\",\n        \"fill-opacity\": 0.5\n      }\n    },\n    {\n      \"id\": \"hydrographycrv\",\n      \"type\": \"line\",\n      \"source\": \"daraa\",\n      \"source-layer\": \"HydrographyCrv\",\n      \"filter\": [\n        \"==\",\n        \"BH140\",\n        [\n          \"get\",\n          \"F_CODE\"\n        ]\n      ],\n      \"paint\": {\n        \"line-color\": \"#00A0C6\",\n        \"line-width\": [\n          \"step\",\n          [\n            \"zoom\"\n          ],\n          1,\n          8,\n          2,\n          13,\n          4\n        ]\n      }\n    },\n</code></pre>"},{"location":"api-deep-dive/styles/#summary","title":"Summary","text":"<p>The OGC API - Styles candidate Standard describes an API for accessing and managing styles for rendering geospatial data on the web. It provides building blocks for interacting with styles in multiple style encodings and with metadata for the styles. This deep dive provided an overview of the candidate Standard and the various resources and endpoints that are supported.</p>"},{"location":"api-deep-dive/tiles/","title":"OGC API - Tiles","text":"<p>Audience</p> <p>Students that are familiar with web services and APIs, and want to have an overview of OGC API - Tiles standard</p> <p>Learning Objectives</p> <p>At the completion of the module students will be able to:</p> <ul> <li>Explain what the OGC API - Tiles standard is</li> <li>Describe what can be done with OGC API - Tiles implementations</li> <li>Understand the main resources offered by OGC API - Tiles implementations</li> <li>Understand how to retrieve a description of the capabilities of an OGC API - Tiles implementation</li> <li>Understand how to issue requests to an implementation of OGC API - Features</li> <li>Be able to find an OGC API - Tiles endpoint and use it through a client</li> </ul>"},{"location":"api-deep-dive/tiles/#introduction","title":"Introduction","text":"<p>OGC API - Tiles is a standard that defines building blocks for creating Web APIs that support the retrieval of geospatial information as tiles. Different forms of geospatial information are supported, such as tiles of vector features (\"vector tiles\"), coverages, maps (or imagery) and other types of geospatial information. Although it can be used independently, the OGC API - Tiles building blocks can be combined with other OGC API Standards and draft specifications for additional capabilities or increasing interoperability for specific types of data. The OGC API - Tiles standard references the OGC Two Dimensional Tile Matrix Set (TMS) and Tileset Metadata standard, which defines logical models and encodings for specifying tile matrix sets and describing tile sets. </p> <p>Note</p> <p>This tutorial module is not intended to be a replacement to the actual OGC API - Tiles - Part 1: Core standard. The tutorial intentionally focuses on a subset of capabilities in order to get the student started with using the standard. Please refer to the OGC API - Tiles - Part 1: Core standard for additional detail.</p> <p>These concepts are at the core of this standard:</p> <ul> <li>Tiling Scheme: schema used to partitioning the space into individual tiles, potentially featuring multiple levels of detail. A tiling scheme is usually defined on top of a CRS, althought it can use other spatial reference systems.</li> <li>Tile Matrix: tiling grid in a given 2D coordinate reference system, associated to a specific scale and partitioning space (e.g.: tiling scheme).   </li> <li>Tile Matrix Set: tiling scheme consisting of a set of tile matrices defined at different scales covering approximately the same area and having a common coordinate reference system. A Tile Matrix has a unique alphanumeric identifier in the Tile Matrix Set. Some tile-based implementations prefer to use the zoom level number.    </li> <li>Tile Set: set of tiles resulting from tiling data according to a particular tiling scheme.</li> </ul> <p>Note</p> <ul> <li>A tile matrix can be implemented as a set of image files (e.g., PNG or JPEG) in a file folder, each file representing a single tile.</li> <li>In some standards the Tile Matrix Set concept is called an image pyramid. </li> </ul> <p> </p>"},{"location":"api-deep-dive/tiles/#background","title":"Background","text":"<p>History</p> <p>The OGC API - Tiles standard is a successor to the OGC's Web Map   Tile Service (WMTS) standard, focusing on simple reusable REST API   building blocks which can be described using the OpenAPI   specification. Whereas WMTS focused on map tiles, the OGC API -   Tiles standard has been designed to support any form of tiled data.</p> <p>Versions</p> <p>OGC API - Tiles - Part 1: Core version 1.0.0 is the current latest version</p> <p>Test suite</p> <p>A test suite is available for:</p> <ul> <li>OGC API - Tiles - Part 1</li> </ul> <p>Implementations</p> <p>Implementations can be found on the implementations page.</p>"},{"location":"api-deep-dive/tiles/#usage","title":"Usage","text":"<p>There are at least two ways to approach an implementation of the OGC API - Tiles Standard.</p> <ul> <li>Read the landing page, look for links, follow them and discover new     links until the desired resource is found</li> <li>Read a Web API definition document that specifies a list of paths     and path templates to resources.</li> </ul> <p>Once you have discovered the relevant resources, then retrieve the list of available tiling schemes from the resource <code>/tileMatrixSets</code> to identify the tiling scheme of interest. Retrieve the details of the specific tiling scheme with <code>/tileMatrixSets/{tileMatrixSetId}</code>.</p> <p>Once you have identified a tiling scheme of interest, you can retrieve tile set metadata for that tiling scheme through <code>/tiles/{tileMatrixSetId}</code> and also retrieve individual tiles with <code>/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}</code></p>"},{"location":"api-deep-dive/tiles/#relation-to-other-ogc-standards","title":"Relation to other OGC Standards","text":"<p>Although the OGC API - Tiles Standard is designed as a building block that can be leveraged by (or with) other OGC API Standards adding precisions about specific types of data available as tiles (e.g., OGC API - Features standard, and OGC API - Maps and OGC API - Coverages candidate standards), the conformance classes defined in this Standard are still concrete enough to make it possible to support distributing and requesting various types of tiled data, including coverages, vector features and maps, by relying strictly on the content herein and in the OGC Two Dimensional Tile Matrix Set and Tile Set Metadata 2.0 standard.</p>"},{"location":"api-deep-dive/tiles/#overview-of-resources","title":"Overview of Resources","text":"<p>OGC API - Tiles - Part 1: Core defines the resources listed in the following table.</p> Resource Method Path Landing page GET / Conformance declaration GET /conformance API definition GET /api Tile matrix sets GET /tileMatrixSets Tile matrix set GET /tileMatrixSets/{tileMatrixSetId} Dataset tileset GET /tiles Dataset tileset metadata GET /tiles/{tileMatrixSetId} Dataset feature tile GET /tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol} Map tileset list GET /map/tiles Map tileset metadata GET /map/tiles/{tileMatrixSetId} Map tile GET /map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol} Collections GET /collections Collection GET /collections/{collectionId} Feature tileset list GET /collections/{collectionId}/tiles Feature tileset metadata GET /collections/{collectionId}/tiles/{tileMatrixSetId} Feature tile GET /collections/{collectionId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol} Map tileset list GET /collections/{collectionId}/map/tiles Map tileset metadata GET /collections/{collectionId}/map/tiles/{tileMatrixSetId} Map tile GET /collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol} Coverage tileset list GET /collections/{collectionId}/coverage/tiles Coverage tileset metadata GET /collections/{collectionId}/coverage/tiles/{tileMatrixSetId} Coverage tile GET /collections/{collectionId}/coverage/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}"},{"location":"api-deep-dive/tiles/#example","title":"Example","text":"<p>This demonstration server publishes tiled feature data through an interface that conforms to OGC API - Tiles.</p> <p>An example request that can be used to retrieve data, referenced to WebMercatorQuad, from the OS Zoomstack collection is https://demo.ldproxy.net/zoomstack/tiles/WebMercatorQuad/0/0/0?f=mvt</p> <p>In this case the data is encoded in Mapbox Vector Tiles (MVT) format.</p> <p>Once downloaded, a client application can then display or process the data.</p> <p></p>"},{"location":"api-deep-dive/tiles/#resources","title":"Resources","text":""},{"location":"api-deep-dive/tiles/#landing-page","title":"Landing page","text":"<p>Given OGC API - Tiles uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/tiles/#conformance-declarations","title":"Conformance declarations","text":"<p>Given OGC API - Tiles uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/tiles/#api-definition","title":"API Definition","text":"<p>Given OGC API - Tiles uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/tiles/#collections","title":"Collections","text":"<p>Given OGC API - Tiles uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/tiles/#collection","title":"Collection","text":"<p>Given OGC API - Tiles uses OGC API - Common as a building block, please see the OGC API - Features deep dive for a detailed explanation of an example implementation.</p>"},{"location":"api-deep-dive/tiles/#tiling-schemes","title":"Tiling Schemes","text":"<p>This endpoint retrieves a list of links to the descriptions of the tile matrix sets supported by the OGC Web API. These could be one or many of the well-known tile matrix sets listed in Annex D of OGC Two Dimensional Tile Matrix Set and Tile Set Metadata, or custom ones.</p> <p>As an example, we can see an extract of the response to this request: https://demo.ldproxy.net/daraa/tileMatrixSets?f=json</p> <pre><code>  \"tileMatrixSets\": [\n    {\n      \"title\": \"Google Maps Compatible for the World\",\n      \"id\": \"WebMercatorQuad\",\n      \"uri\": \"http://www.opengis.net/def/tilematrixset/OGC/1.0/WebMercatorQuad\",\n      \"links\": [\n        {\n          \"rel\": \"self\",\n          \"title\": \"Tile matrix set 'WebMercatorQuad'\",\n          \"href\": \"https://demo.ldproxy.net/daraa/tileMatrixSets/WebMercatorQuad\"\n        }\n      ]\n    },\n    {\n      \"title\": \"CRS84 for the World\",\n      \"id\": \"WorldCRS84Quad\",\n      \"uri\": \"http://www.opengis.net/def/tilematrixset/OGC/1.0/WorldCRS84Quad\",\n      \"links\": [\n        {\n          \"rel\": \"self\",\n          \"title\": \"Tile matrix set 'WorldCRS84Quad'\",\n          \"href\": \"https://demo.ldproxy.net/daraa/tileMatrixSets/WorldCRS84Quad\"\n        }\n      ]\n    },\n    {\n      \"title\": \"World Mercator WGS84 (ellipsoid)\",\n      \"id\": \"WorldMercatorWGS84Quad\",\n      \"uri\": \"http://www.opengis.net/def/tilematrixset/OGC/1.0/WorldMercatorWGS84Quad\",\n      \"links\": [\n        {\n          \"rel\": \"self\",\n          \"title\": \"Tile matrix set 'WorldMercatorWGS84Quad'\",\n          \"href\": \"https://demo.ldproxy.net/daraa/tileMatrixSets/WorldMercatorWGS84Quad\"\n        }\n      ]\n    }\n  ]\n</code></pre> <p>If we append the tile matrix set id to this url, we will get the description of one specific tile matrix set, as we can see in the example below, generated with this request:</p> <p>https://demo.ldproxy.net/daraa/tileMatrixSets/WebMercatorQuad?f=json</p> <p><pre><code>{\n  \"title\": \"Google Maps Compatible for the World\",\n  \"id\": \"WebMercatorQuad\",\n  \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\",\n  \"wellKnownScaleSet\": \"http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible\",\n  \"uri\": \"http://www.opengis.net/def/tilematrixset/OGC/1.0/WebMercatorQuad\",\n  \"tileMatrices\": [\n    {\n      \"id\": \"0\",\n      \"tileWidth\": 256,\n      \"tileHeight\": 256,\n      \"matrixWidth\": 1,\n      \"matrixHeight\": 1,\n      \"scaleDenominator\": 559082264.028717,\n      \"cellSize\": 156543.033928041,\n      \"pointOfOrigin\": [\n        -20037508.3427892,\n        20037508.3427892\n      ],\n      \"cornerOfOrigin\": \"topLeft\"\n    },\n    {\n      \"id\": \"1\",\n      \"tileWidth\": 256,\n      \"tileHeight\": 256,\n      \"matrixWidth\": 2,\n      \"matrixHeight\": 2,\n      \"scaleDenominator\": 279541132.014358,\n      \"cellSize\": 78271.5169640204,\n      \"pointOfOrigin\": [\n        -20037508.3427892,\n        20037508.3427892\n      ],\n      \"cornerOfOrigin\": \"topLeft\"\n    },\n  }\n</code></pre> Note that apart from the descriptive metadata, the response also contains a detailed list of available tile matrices.</p>"},{"location":"api-deep-dive/tiles/#dataset-tilesets","title":"Dataset Tilesets","text":"<p>These endpoints define how a list of tilesets can be associated to an OGC API dataset / landing page.</p> <p>For vector tiles, we can request tiles using the <code>/tiles</code> endpoint. As an example, this is part of the response triggered with this request:</p> <p>https://demo.ldproxy.net/daraa/tiles?f=json</p> <pre><code>{\n  \"title\": \"Daraa\",\n  \"description\": \"This is a test dataset used in the Open Portrayal Framework thread in the OGC Testbed-15 as well as the OGC Vector Tiles Pilot Phase 2. The data is based on OpenStreetMap data from the region of Daraa, Syria, converted to the Topographic Data Store schema of NGA.\",\n  \"tilesets\": [\n    {\n      \"links\": [\n        {\n          \"rel\": \"self\",\n          \"title\": \"Access the data as tiles in the tile matrix set 'WebMercatorQuad'\",\n          \"href\": \"https://demo.ldproxy.net/daraa/tiles/WebMercatorQuad\"\n        },\n        {\n          \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme\",\n          \"title\": \"Definition of the tiling scheme\",\n          \"href\": \"https://demo.ldproxy.net/daraa/tileMatrixSets/WebMercatorQuad\"\n        },\n        {\n          \"rel\": \"item\",\n          \"type\": \"application/vnd.mapbox-vector-tile\",\n          \"title\": \"Mapbox vector tiles; the link is a URI template where {tileMatrix}/{tileRow}/{tileCol} is the tile in the tiling scheme 'WebMercatorQuad'\",\n          \"href\": \"https://demo.ldproxy.net/daraa/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}?f=mvt\",\n          \"templated\": true\n        }\n      ],\n</code></pre> <p>We can request metadata about a particular tileset by appending the tile matrix set ID:  <code>/tiles/{tileMatrixSetId}</code>. For instance, the example below is triggered by this request:</p> <p>https://demo.ldproxy.net/daraa/tiles/WebMercatorQuad?f=json</p> <pre><code>{\n  \"tilejson\": \"3.0.0\",\n  \"tiles\": [\n    \"https://demo.ldproxy.net/daraa/tiles/WebMercatorQuad/{z}/{y}/{x}?f=mvt\"\n  ],\n  \"vector_layers\": [\n    {\n      \"id\": \"AeronauticCrv\",\n      \"fields\": {\n        \"id\": \"Integer\",\n        \"F_CODE\": \"String\",\n        \"ZI001_SDV\": \"String\",\n        \"UFI\": \"String\",\n        \"ZI005_FNA\": \"String\",\n        \"FCSUBTYPE\": \"Integer\",\n        \"ZI006_MEM\": \"String\",\n        \"ZI001_SDP\": \"String\"\n      },\n      \"description\": \"\",\n      \"maxzoom\": 18,\n      \"minzoom\": 6,\n      \"geometry_type\": \"lines\"\n    },\n</code></pre> <p>Finally we can request the actual data, in this case a vector tile, using <code>/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}</code>.</p> <p>We can reuse the same endpoints for map or coverage tiles, but in those cases we need to introduce <code>map</code> or <code>coverage</code> in the path.</p> <p>Map tileset list:</p> <ul> <li><code>/map/tiles</code></li> </ul> <p>Map tileset metadata:</p> <ul> <li><code>/map/tiles/{tileMatrixSetId}</code></li> </ul> <p>Map tile:</p> <ul> <li><code>/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}</code></li> </ul>"},{"location":"api-deep-dive/tiles/#geodata-tilesets","title":"GeoData Tilesets","text":"<p>These endpoints define how a list of tilesets can be associated to an OGC API collection. </p> <p>For vector tiles, you can retrieve the tileset list of a given collection with <code>/collections/{collectionId}/tiles</code>. For instance, the sample below is extracted from the response to this request:</p> <p>https://demo.ldproxy.net/daraa/collections/StructureSrf/tiles?f=json</p> <pre><code>{\n  \"title\": \"Structure (Surfaces)\",\n  \"tilesets\": [\n    {\n      \"links\": [\n        {\n          \"rel\": \"self\",\n          \"title\": \"Access the data as tiles in the tile matrix set 'WebMercatorQuad'\",\n          \"href\": \"https://demo.ldproxy.net/daraa/collections/StructureSrf/tiles/WebMercatorQuad\"\n        },\n        {\n          \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme\",\n          \"title\": \"Definition of the tiling scheme\",\n          \"href\": \"https://demo.ldproxy.net/daraa/tileMatrixSets/WebMercatorQuad\"\n        },\n        {\n          \"rel\": \"item\",\n          \"type\": \"application/vnd.mapbox-vector-tile\",\n          \"title\": \"Mapbox vector tiles; the link is a URI template where {tileMatrix}/{tileRow}/{tileCol} is the tile in the tiling scheme 'WebMercatorQuad'\",\n          \"href\": \"https://demo.ldproxy.net/daraa/collections/StructureSrf/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}?f=mvt\",\n          \"templated\": true\n        }\n      ],\n</code></pre> <p>The tileset metadata of a specific tile matrix set, can be retrieved by appending the tile matrix set ID: <code>/collections/{collectionId}/tiles/{tileMatrixSetId}</code>. For instance, the following response was extracted from this request:</p> <p>https://demo.ldproxy.net/daraa/collections/StructureSrf/tiles/WebMercatorQuad?f=json</p> <pre><code>  \"links\": [\n    {\n      \"rel\": \"self\",\n      \"type\": \"application/json\",\n      \"title\": \"This document\",\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/StructureSrf/tiles/WebMercatorQuad?f=json\"\n    },\n    {\n      \"rel\": \"alternate\",\n      \"type\": \"application/vnd.mapbox.tile+json\",\n      \"title\": \"This document as TileJSON\",\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/StructureSrf/tiles/WebMercatorQuad?f=tilejson\"\n    },\n    {\n      \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme\",\n      \"title\": \"Definition of the tiling scheme\",\n      \"href\": \"https://demo.ldproxy.net/daraa/tileMatrixSets/WebMercatorQuad\"\n    },\n    {\n      \"rel\": \"item\",\n      \"type\": \"application/vnd.mapbox-vector-tile\",\n      \"title\": \"Mapbox vector tiles; the link is a URI template where {tileMatrix}/{tileRow}/{tileCol} is the tile in the tiling scheme '{{tileMatrixSetId}}'\",\n      \"href\": \"https://demo.ldproxy.net/daraa/collections/StructureSrf/tiles/WebMercatorQuad/{tileMatrix}/{tileRow}/{tileCol}?f=mvt\",\n      \"templated\": true\n    }\n  ],\n  \"dataType\": \"vector\",\n  \"tileMatrixSetId\": \"WebMercatorQuad\",\n  \"tileMatrixSetURI\": \"http://www.opengis.net/def/tilematrixset/OGC/1.0/WebMercatorQuad\",\n  \"tileMatrixSetLimits\": [\n    {\n      \"tileMatrix\": \"6\",\n      \"minTileRow\": 25,\n      \"maxTileRow\": 25,\n      \"minTileCol\": 38,\n      \"maxTileCol\": 38,\n      \"numberOfTiles\": 1\n    },\n    {\n      \"tileMatrix\": \"7\",\n      \"minTileRow\": 51,\n      \"maxTileRow\": 51,\n      \"minTileCol\": 76,\n      \"maxTileCol\": 76,\n      \"numberOfTiles\": 1\n    },\n</code></pre> <p>Finally we can request the actual data, in this case a vector tile, using <code>/collections/{collectionId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}</code>.</p> <p>Similarly to dataset tilesets, we can reuse the same endpoints for map or coverage tiles, but in those cases we need to introduce <code>map</code> or <code>coverage</code> in the path.</p> <p>Map tileset list:</p> <ul> <li><code>/collections/{collectionId}/map/tiles</code></li> </ul> <p>Map tileset metadata:</p> <ul> <li><code>/collections/{collectionId}/map/tiles/{tileMatrixSetId}</code></li> </ul> <p>Map tile:</p> <ul> <li><code>/collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}</code></li> </ul> <p>You can see here an example of a request for a (map) tileset list and here an example of a request for (map) tileset metadata.</p>"},{"location":"api-deep-dive/tiles/#client-usage","title":"Client usage","text":"<p>In this section we will demonstrate how-to access OGC API - Tiles using the OpenLayers client.</p>"},{"location":"api-deep-dive/tiles/#openlayers","title":"OpenLayers","text":"<p>The latest versions of OpenLayers supports both OGC Vector tiles and Map Tiles, with the <code>OGCVectorTile</code> and the <code>OGCMapTile</code> classes.</p> <p>An example of this can be seen on the example page on the OpenLayers website.</p> <p><pre><code>import MVT from 'ol/format/MVT.js';\nimport Map from 'ol/Map.js';\nimport OGCVectorTile from 'ol/source/OGCVectorTile.js';\nimport VectorTileLayer from 'ol/layer/VectorTile.js';\nimport View from 'ol/View.js';\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new VectorTileLayer({\n      source: new OGCVectorTile({\n        url: 'https://demo.ldproxy.net/zoomstack/tiles/WebMercatorQuad',\n        format: new MVT(),\n      }),\n      background: '#d1d1d1',\n      style: {\n        'stroke-width': 0.6,\n        'stroke-color': '#8c8b8b',\n        'fill-color': '#f7f7e9',\n      },\n    }),\n  ],\n  view: new View({\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n</code></pre> </p> <p>This example shows both, Map and Vector tiles, that do not use the WGS84 CRS.</p>"},{"location":"api-deep-dive/tiles/#summary","title":"Summary","text":"<p>OGC API - Tiles specifies a standard for Web APIs that provide tiles of geospatial information. Different forms of geospatial information are supported, such as tiles of vector features (\"vector tiles\"), coverages, maps (or imagery) and potentially eventually additional types of tiles of geospatial information. This deep dive provided an overview of the standard and the various Resources and endpoints that are supported. It also shows an example of how-to access an OGC API - Tiles endpoint, using a JavaScript client.</p>"}]}